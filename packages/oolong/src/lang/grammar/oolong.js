/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,14],$V3=[1,13],$V4=[1,17],$V5=[5,13,19,25,36,79],$V6=[1,25],$V7=[1,31],$V8=[1,43],$V9=[15,23,42,73,74,78,85,103,104,106,118,176,192],$Va=[1,48],$Vb=[1,58],$Vc=[1,61],$Vd=[1,52],$Ve=[1,53],$Vf=[1,54],$Vg=[1,57],$Vh=[1,59],$Vi=[1,60],$Vj=[15,23,73,74],$Vk=[2,61],$Vl=[2,83],$Vm=[1,98],$Vn=[15,23,73,74,106,176,182,199],$Vo=[1,107],$Vp=[1,122],$Vq=[1,120],$Vr=[1,121],$Vs=[15,23,73,74,85],$Vt=[15,23,73,74,85,192],$Vu=[1,124],$Vv=[18,96,112,114,119],$Vw=[1,136],$Vx=[1,141],$Vy=[106,176,199],$Vz=[2,200],$VA=[18,112,114,119],$VB=[1,170],$VC=[23,73,74,176,182],$VD=[18,114,119],$VE=[176,199],$VF=[18,119],$VG=[1,195],$VH=[15,85],$VI=[15,118],$VJ=[1,244],$VK=[1,252],$VL=[1,250],$VM=[1,251],$VN=[15,85,192],$VO=[15,85,176,182],$VP=[15,23,73,74,85,176,182],$VQ=[1,276],$VR=[1,282],$VS=[1,285],$VT=[176,182];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"import":13,"STRING":14,"NEWLINE":15,"INDENT":16,"import_statement_block":17,"DEDENT":18,"const":19,"const_statement_item":20,"const_statement_block":21,"identifier":22,"=":23,"literal":24,"schema":25,"identifier_or_string":26,"schema_statement_block":27,"comment_or_not":28,"schema_entities":29,"schema_views_or_not":30,"schema_views":31,"entities":32,"schema_entities_block":33,"views":34,"schema_views_block":35,"type":36,"type_statement_item":37,"type_statement_block":38,"type_base":39,"type_info_or_not":40,"type_modifiers_or_not":41,":":42,"types":43,"int_keyword":44,"number_keyword":45,"text_keyword":46,"bool_keyword":47,"binary_keyword":48,"datetime_keyword":49,"any":50,"enum":51,"array":52,"object":53,"int":54,"integer":55,"number":56,"float":57,"decimal":58,"text":59,"string":60,"bool":61,"boolean":62,"blob":63,"binary":64,"buffer":65,"datetime":66,"timestamp":67,"type_infos":68,"type_info":69,"narrow_function_call":70,"type_modifiers":71,"type_modifier":72,"~":73,"|>":74,"entity_statement_header":75,"entity_statement_block":76,"entity_statement_header0":77,"extends":78,"entity":79,"with_features_or_not":80,"has_fields_or_not":81,"key_or_not":82,"index_or_not":83,"data_or_not":84,"--":85,"with_features":86,"has_fields":87,"key_statement":88,"index_statement":89,"data_statement":90,"interfaces_or_not":91,"interfaces_statement":92,"with":93,"feature_inject":94,"with_features_block":95,"has":96,"field_item":97,"has_fields_block":98,"field_item_body":99,"field_comment_or_not":100,"modifiable_param":101,"field_assoc":102,"->":103,"=>":104,"[":105,"]":106,"type_base_or_not":107,"field_modifiers_or_not":108,"field_modifiers":109,"field_modifier":110,"general_function_call":111,"key":112,"array_of_identifier_or_string":113,"index":114,"index_item":115,"index_statement_block":116,"index_item_body":117,"unique":118,"data":119,"inline_object":120,"inline_array":121,"accept_or_not":122,"accept_statement":123,"accept":124,"accept_block":125,"dataset_statement":126,"dataset":127,"dataset_statement_block":128,"contains":129,"dataset_statement_block2":130,"document_entity_join":131,"dataset_entity_join":132,"being":133,"identifier_string_or_dotname":134,"of":135,"which":136,"view_statement":137,"view":138,"view_statement_block":139,"view_main_entity":140,"view_selection_or_not":141,"group_by_or_not":142,"order_by_or_not":143,"skip_or_not":144,"limit_or_not":145,"view_joinings_or_not":146,"view_joinings":147,"is":148,"article_keyword":149,"view_entity_target":150,"list":151,"document":152,"view_selection":153,"selection_keyword":154,"conditional_expression":155,"view_selection_block":156,"a":157,"an":158,"the":159,"one":160,"where":161,"when":162,"to":163,"be":164,"selected":165,"by":166,"group":167,"identifier_string_or_dotname_list":168,"order":169,"order_by_list":170,"order_by_block":171,"order_by_clause":172,"asc":173,"desc":174,"order_by_list0":175,",":176,"skip":177,"value":178,"limit":179,"(":180,"nfc_param_list":181,")":182,"nfc_param":183,"nfc_param_list0":184,"gfc_param_list":185,"gfc_param":186,"gfc_param_list0":187,"gfc_param0":188,"REFERENCE":189,"DOTNAME":190,"identifier_string_or_dotname_list0":191,"NAME":192,"INTEGER":193,"FLOAT":194,"BOOL":195,"REGEXP":196,"SCRIPT":197,"{":198,"}":199,"kv_pairs":200,"kv_pair_item":201,"kv_pairs0":202,"value_list":203,"value_list0":204,"identifier_or_string_list":205,"identifier_or_string_list0":206,"simple_expression":207,"unary_expression":208,"binary_expression":209,"exists":210,"not":211,"null":212,">":213,"<":214,">=":215,"<=":216,"!=":217,"in":218,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"import",14:"STRING",15:"NEWLINE",16:"INDENT",18:"DEDENT",19:"const",23:"=",25:"schema",32:"entities",34:"views",36:"type",42:":",50:"any",51:"enum",52:"array",53:"object",54:"int",55:"integer",56:"number",57:"float",58:"decimal",59:"text",60:"string",61:"bool",62:"boolean",63:"blob",64:"binary",65:"buffer",66:"datetime",67:"timestamp",73:"~",74:"|>",78:"extends",79:"entity",85:"--",92:"interfaces_statement",93:"with",96:"has",103:"->",104:"=>",105:"[",106:"]",112:"key",114:"index",118:"unique",119:"data",124:"accept",127:"dataset",129:"contains",131:"document_entity_join",133:"being",135:"of",136:"which",138:"view",147:"view_joinings",148:"is",151:"list",152:"document",155:"conditional_expression",157:"a",158:"an",159:"the",160:"one",161:"where",162:"when",163:"to",164:"be",165:"selected",166:"by",167:"group",169:"order",173:"asc",174:"desc",176:",",177:"skip",179:"limit",180:"(",182:")",189:"REFERENCE",190:"DOTNAME",192:"NAME",193:"INTEGER",194:"FLOAT",195:"BOOL",196:"REGEXP",197:"SCRIPT",198:"{",199:"}",210:"exists",211:"not",212:"null",213:">",214:"<",215:">=",216:"<=",217:"!=",218:"in"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[17,2],[17,3],[9,3],[9,5],[20,3],[21,2],[21,3],[11,6],[27,3],[30,0],[30,1],[29,5],[33,2],[33,3],[31,5],[35,2],[35,3],[10,3],[10,5],[37,4],[38,2],[38,3],[39,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[44,1],[44,1],[45,1],[45,1],[45,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[40,0],[40,1],[68,1],[68,2],[69,1],[69,1],[41,0],[41,1],[71,1],[71,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[12,2],[12,5],[75,1],[75,3],[77,2],[76,6],[28,0],[28,3],[80,0],[80,1],[81,0],[81,1],[82,0],[82,1],[83,0],[83,1],[84,0],[84,1],[91,0],[91,1],[86,3],[86,5],[95,2],[95,3],[87,3],[87,5],[97,2],[98,2],[98,3],[100,0],[100,2],[99,1],[99,3],[102,2],[102,2],[102,4],[107,0],[107,1],[108,0],[108,1],[109,1],[109,2],[110,2],[110,2],[110,2],[110,2],[110,2],[110,2],[88,3],[88,3],[89,3],[89,5],[116,2],[116,3],[115,1],[115,2],[117,1],[117,1],[90,3],[90,3],[122,0],[122,1],[123,3],[123,5],[125,2],[125,3],[126,6],[128,3],[128,4],[130,3],[130,4],[132,3],[132,7],[137,6],[139,8],[146,0],[146,1],[140,3],[140,4],[150,1],[150,2],[141,0],[141,1],[153,3],[153,5],[149,1],[149,1],[149,1],[149,1],[154,2],[154,2],[154,3],[154,2],[154,1],[156,2],[156,3],[142,0],[142,4],[143,0],[143,4],[143,6],[171,2],[171,3],[172,1],[172,2],[172,2],[170,1],[170,2],[175,2],[175,3],[144,0],[144,3],[145,0],[145,3],[101,4],[94,1],[94,1],[70,4],[181,1],[181,2],[184,2],[184,3],[183,1],[183,1],[111,4],[185,1],[185,2],[187,2],[187,3],[186,1],[186,2],[188,1],[188,1],[134,1],[134,1],[134,1],[168,1],[168,2],[191,2],[191,3],[26,1],[26,1],[22,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[120,2],[120,3],[201,3],[201,3],[200,1],[200,2],[202,2],[202,3],[121,2],[121,3],[203,1],[203,2],[204,2],[204,3],[113,3],[205,1],[205,2],[206,2],[206,3],[178,1],[178,1],[207,1],[207,1],[208,2],[208,3],[208,3],[208,4],[208,4],[209,3],[209,3],[209,3],[209,3],[209,3],[209,3],[209,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 11:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 13:
this.$ = state.import($$[$0-1]);
break;
case 14:
this.$ = state.import($$[$0-2]);
break;
case 17:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 20:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 21:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:
this.$ = { entities: $$[$0-1] };
break;
case 25: case 28: case 99: case 129: case 141: case 146: case 171: case 178:
this.$ = [ $$[$0-1] ];
break;
case 26: case 29: case 100: case 130: case 142: case 147: case 172: case 179:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 27:
this.$ = { views: $$[$0-1] };
break;
case 32:
            
            if (BUILTIN_TYPES.has($$[$0-3])) throw new Error('Cannot use built-in type "' + $$[$0-3] + '" as a custom type name. Line: ' + _$[$0-3].first_line);
            // default as text
            state.defineType($$[$0-3], Object.assign({type: 'text'}, $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 35: case 81: case 154: case 195: case 202: case 213: case 234:
this.$ = $$[$0];
break;
case 36:
this.$ = { type: 'integer' };
break;
case 37:
this.$ = { type: 'number' }    ;
break;
case 38:
this.$ = { type: 'text' };
break;
case 39:
this.$ = { type: 'boolean' };
break;
case 40:
this.$ = { type: 'binary' };
break;
case 41:
this.$ = { type: 'datetime' };
break;
case 42:
this.$ = { type: 'any' };
break;
case 43:
this.$ = { type: 'enum' };
break;
case 44:
this.$ = { type: 'array' };
break;
case 45:
this.$ = { type: 'object' };
break;
case 46:
this.$ = { type: $$[$0] };
break;
case 64: case 103: case 233: case 235:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 65:
this.$ = { [$$[$0]]: true };
break;
case 66:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 68: case 116:
this.$ = { modifiers: $$[$0] };
break;
case 69: case 117: case 183: case 185: case 197: case 204: case 215: case 238: case 240: case 243: case 245:
this.$ = [ $$[$0] ];
break;
case 70: case 118: case 184: case 186: case 196: case 198: case 203: case 205: case 216: case 239: case 241: case 244: case 246:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 71: case 119:
this.$ = state.normalizeValidator($$[$0]);
break;
case 72: case 120:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 73: case 121:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 74: case 122:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 75: case 123:
this.$ = state.normalizeActivator($$[$0]);
break;
case 76: case 124:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 78:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 79:
this.$ = [ $$[$0], {} ];
break;
case 80:
this.$ = [ $$[$0-2], { base: $$[$0] } ];
break;
case 82:
this.$ = Object.assign({}, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 84:
this.$ = { comment: $$[$0-1] };
break;
case 97:
this.$ = { features: [ $$[$0-1] ] };
break;
case 98:
this.$ = { features: $$[$0-1] };
break;
case 101:
this.$ = { fields: { [$$[$0-1].name]: $$[$0-1] } };
break;
case 102:
this.$ = { fields: $$[$0-1] };
break;
case 104:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 105:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 107:
this.$ = { comment: $$[$0] };
break;
case 109:
this.$ = Object.assign({ name: $$[$0-2] }, $$[$0-1], $$[$0]);
break;
case 110:
this.$ = { association: { type: 'hasOne', target: $$[$0] } }  /* hasOne */;
break;
case 111:
this.$ = { association: { type: 'belongsTo', target: $$[$0] } } /* belongsTo */;
break;
case 112:
this.$ = { association: { type: 'hasMany', target: $$[$0-1] } }  /* hasMany */;
break;
case 125: case 126:
this.$ = { key: $$[$0-1] };
break;
case 127:
this.$ = { indexes: [$$[$0-1]] };
break;
case 128:
this.$ = { indexes: $$[$0-1] };
break;
case 132:
this.$ = Object.assign({}, $$[$0-1], { unique: true });
break;
case 133: case 134:
this.$ = { fields: $$[$0] };
break;
case 135: case 136:
this.$ = { data: $$[$0-1] };
break;
case 139:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 140:
this.$ = { accept: $$[$0-1] };
break;
case 143:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 144:
this.$ = { entity: $$[$0-1] };
break;
case 145:
this.$ = { entity: $$[$0-2], joinWith: $$[$0] };
break;
case 148:
this.$ = { entity: $$[$0-2], on: { left: $$[$0], right: '$key' } };
break;
case 149:
this.$ = { dataset: $$[$0-6], on: { left: $$[$0], right: $$[$0-2] } };
break;
case 150:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 151:
this.$ = Object.assign({}, $$[$0-7], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 155:
this.$ = Object.assign({}, $$[$0-1], { isList: true });
break;
case 156:
this.$ = { entity: $$[$0] };
break;
case 157:
this.$ = { document: $$[$0-1] };
break;
case 160:
this.$ = { where: [ $$[$0-1] ] };
break;
case 161:
this.$ = { where: $$[$0-1] };
break;
case 174:
this.$ = { groupBy: $$[$0-1] };
break;
case 176: case 177:
this.$ = { orderBy: $$[$0-1] };
break;
case 180:
this.$ = { field: $$[$0], ascend: true };
break;
case 181:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 182:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 188:
this.$ = { skip: $$[$0-1] };
break;
case 190:
this.$ = { limit: $$[$0-1] };
break;
case 191:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 194: case 201:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 200:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 207:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 214:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 228:
this.$ = {};
break;
case 229: case 237: case 242:
this.$ = $$[$0-1];
break;
case 230: case 231:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 236:
this.$ = [];
break;
case 248:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 251:
 this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] }; 
break;
case 252:
 this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] }; 
break;
case 253:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] }; 
break;
case 254:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] }; 
break;
case 255:
 this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }; 
break;
case 256:
 this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] }; 
break;
case 257:
 this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] }; 
break;
case 258:
 this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] }; 
break;
case 259:
 this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] }; 
break;
case 260:
 this.$ = { oolType: 'BinaryExpression', operator: '=', left: $$[$0-2], right: $$[$0] }; 
break;
case 261:
 this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] }; 
break;
case 262:
 this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,25:$V2,36:$V3,75:15,77:16,79:$V4},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,18]},{5:[2,4],6:19,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,25:$V2,36:$V3,75:15,77:16,79:$V4},o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),o($V5,[2,9]),o($V5,[2,10]),{14:[1,20],15:[1,21]},{15:[1,23],20:22,22:24,192:$V6},{15:[1,27],22:28,37:26,192:$V6},{14:$V7,22:30,26:29,192:$V6},{15:[1,32]},{15:[2,79],78:[1,33]},{14:$V7,22:30,26:34,192:$V6},{1:[2,3]},{5:[2,5]},{15:[1,35]},{16:[1,36]},{15:[1,37]},{16:[1,38]},{23:[1,39]},o([15,23,42,73,74,78,85,103,104,106,118,176,180,182,192,199],[2,219]),{15:[1,40]},{16:[1,41]},{39:42,42:$V8},{15:[1,44]},o($V9,[2,217]),o($V9,[2,218]),o($V5,[2,77],{16:[1,45]}),{14:$V7,22:30,26:46,192:$V6},o([15,78],[2,81]),o($V5,[2,11]),{14:$Va,17:47},o($V5,[2,15]),{20:50,21:49,22:24,192:$V6},{14:$Vb,24:51,105:$Vc,120:55,121:56,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},o($V5,[2,30]),{22:28,37:63,38:62,192:$V6},o($Vj,$Vk,{40:64,68:65,69:66,22:67,70:68,192:$V6}),{14:$V7,22:30,26:80,43:69,44:70,45:71,46:72,47:73,48:74,49:75,50:[1,76],51:[1,77],52:[1,78],53:[1,79],54:[1,81],55:[1,82],56:[1,83],57:[1,84],58:[1,85],59:[1,86],60:[1,87],61:[1,88],62:[1,89],63:[1,90],64:[1,91],65:[1,92],66:[1,93],67:[1,94],192:$V6},{16:[1,95]},o([18,93,96,112,114,119],$Vl,{76:96,28:97,85:$Vm}),{15:[2,80]},{18:[1,99]},{15:[1,100]},{18:[1,101]},{15:[1,102]},{15:[2,17]},o($Vn,[2,220]),o($Vn,[2,221]),o($Vn,[2,222]),o($Vn,[2,223]),o($Vn,[2,224]),o($Vn,[2,225]),o($Vn,[2,226]),o($Vn,[2,227]),{14:$V7,22:30,26:106,192:$V6,193:$Vo,199:[1,103],200:104,201:105},{14:$Vb,22:114,24:113,70:112,105:$Vc,106:[1,108],120:55,121:56,178:110,183:111,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi,203:109},{18:[1,115]},{15:[1,116]},{15:[2,67],23:$Vp,41:117,71:118,72:119,73:$Vq,74:$Vr},o($Vs,[2,62]),o($Vs,[2,63],{69:66,22:67,70:68,68:123,192:$V6}),o($Vt,[2,65],{180:$Vu}),o($Vt,[2,66]),o($Vt,[2,35]),o($Vt,[2,36]),o($Vt,[2,37]),o($Vt,[2,38]),o($Vt,[2,39]),o($Vt,[2,40]),o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),o($Vt,[2,45]),o($Vt,[2,46]),o($Vt,[2,47]),o($Vt,[2,48]),o($Vt,[2,49]),o($Vt,[2,50]),o($Vt,[2,51]),o($Vt,[2,52]),o($Vt,[2,53]),o($Vt,[2,54]),o($Vt,[2,55]),o($Vt,[2,56]),o($Vt,[2,57]),o($Vt,[2,58]),o($Vt,[2,59]),o($Vt,[2,60]),{27:125,28:126,32:$Vl,85:$Vm},{18:[1,127]},o($Vv,[2,85],{80:128,86:129,93:[1,130]}),{14:[1,131]},o($V5,[2,12]),{14:$Va,17:132,18:[2,13]},o($V5,[2,16]),{18:[2,18],20:50,21:133,22:24,192:$V6},o($Vn,[2,228]),{199:[1,134]},{176:$Vw,199:[2,232],202:135},{42:[1,137]},{42:[1,138]},o($Vn,[2,236]),{106:[1,139]},{106:[2,238],176:$Vx,204:140},o($Vy,[2,247]),o($Vy,[2,248]),o([23,73,74,106,176,182,199],[2,199]),o($Vy,$Vz,{180:$Vu}),o($V5,[2,31]),{18:[2,33],22:28,37:63,38:142,192:$V6},{15:[2,32]},{15:[2,68]},{15:[2,69],23:$Vp,71:143,72:119,73:$Vq,74:$Vr},{22:144,70:145,192:$V6},{22:146,70:147,192:$V6},{22:148,70:149,192:$V6},o($Vs,[2,64]),{14:$Vb,22:152,24:113,105:$Vc,120:55,121:56,181:150,183:151,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},{18:[1,153]},{29:154,32:[1,155]},o($V5,[2,78]),o($VA,[2,87],{81:156,87:157,96:[1,158]}),o($Vv,[2,86]),{15:[1,160],22:161,70:162,94:159,192:$V6},{15:[1,163]},{18:[2,14]},{18:[2,19]},o($Vn,[2,229]),{199:[2,233]},{14:$V7,22:30,26:106,192:$V6,193:$Vo,201:164},{14:$Vb,22:114,24:113,70:112,105:$Vc,120:55,121:56,178:165,183:111,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},{14:$Vb,22:114,24:113,70:112,105:$Vc,120:55,121:56,178:166,183:111,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},o($Vn,[2,237]),{106:[2,239]},{14:$Vb,22:114,24:113,70:112,105:$Vc,120:55,121:56,178:167,183:111,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},{18:[2,34]},{15:[2,70]},o($Vj,[2,71],{180:$Vu}),o($Vj,[2,72]),o($Vj,[2,73],{180:$Vu}),o($Vj,[2,74]),o($Vj,[2,75],{180:$Vu}),o($Vj,[2,76]),{182:[1,168]},{176:$VB,182:[2,195],184:169},o($VC,$Vz),o($V5,[2,20]),{18:[2,22],30:171,31:172,34:[1,173]},{15:[1,174]},o($VD,[2,89],{82:175,88:176,112:[1,177]}),o($VA,[2,88]),{14:$V7,15:[1,179],22:30,26:182,97:178,99:180,101:181,192:$V6},{15:[1,183]},{16:[1,184]},{15:[2,192],180:$Vu},{15:[2,193]},o([18,32,93,96,112,114,119],[2,84]),{176:$Vw,199:[2,234],202:185},o($VE,[2,230]),o($VE,[2,231]),{106:[2,240],176:$Vx,204:186},o([15,23,73,74,85,106,176,192,199],[2,194]),{182:[2,196]},{14:$Vb,22:152,24:113,105:$Vc,120:55,121:56,183:187,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},{18:[2,21]},{18:[2,23]},{15:[1,188]},{16:[1,189]},o($VF,[2,91],{83:190,89:191,114:[1,192]}),o($VD,[2,90]),{14:$V7,22:30,26:193,105:$VG,113:194,192:$V6},{15:[1,196]},{16:[1,197]},{15:[2,106],85:[1,199],100:198},o($VH,[2,108]),o($Vt,[2,113],{102:200,107:201,39:204,42:$V8,103:[1,202],104:[1,203]}),o($Vv,[2,97]),{22:161,70:162,94:206,95:205,192:$V6},{199:[2,235]},{106:[2,241]},{176:$VB,182:[2,197],184:207},{16:[1,208]},{14:$V7,22:30,26:210,33:209,192:$V6},{18:[2,93],84:211,90:212,119:[1,213]},o($VF,[2,92]),{14:$V7,15:[1,215],22:30,26:217,105:$VG,113:218,115:214,117:216,192:$V6},{15:[1,219]},{15:[1,220]},{14:$V7,22:30,26:222,192:$V6,205:221},o($VA,[2,101]),{14:$V7,22:30,26:182,97:224,98:223,99:180,101:181,192:$V6},{15:[2,103]},{14:[1,225]},o($VH,$Vk,{68:65,69:66,22:67,70:68,40:226,192:$V6}),o($Vs,$Vk,{68:65,69:66,22:67,70:68,40:227,192:$V6}),{14:$V7,22:30,26:228,105:[1,229],192:$V6},{14:$V7,22:30,26:230,192:$V6},o($Vt,[2,114]),{18:[1,231]},{15:[1,232]},{182:[2,198]},{14:$V7,22:30,26:234,35:233,192:$V6},{18:[1,235]},{15:[1,236]},{18:[2,82]},{18:[2,94]},{105:$Vc,120:237,121:238,198:$Vi},{15:[1,239]},{16:[1,240]},{15:[2,131],118:[1,241]},o($VI,[2,133]),o($VI,[2,134]),o($VD,[2,125]),o($VD,[2,126]),{106:[1,242]},{106:[2,243],176:$VJ,206:243},{18:[1,245]},{15:[1,246]},{15:[2,107]},o($VH,[2,109]),o($VH,[2,115],{108:247,109:248,110:249,23:$VK,73:$VL,74:$VM}),o($VN,[2,110]),{14:$V7,22:30,26:253,192:$V6},o($VN,[2,111]),o($Vv,[2,98]),{18:[2,99],22:161,70:162,94:206,95:254,192:$V6},{18:[1,255]},{15:[1,256]},o([18,34],[2,24]),{14:$V7,18:[2,25],22:30,26:210,33:257,192:$V6},{15:[1,258]},{15:[1,259]},o($VF,[2,127]),{14:$V7,22:30,26:217,105:$VG,113:218,115:261,116:260,117:216,192:$V6},{15:[2,132]},o($VI,[2,242]),{106:[2,244]},{14:$V7,22:30,26:262,192:$V6},o($VA,[2,102]),{14:$V7,18:[2,104],22:30,26:182,97:224,98:263,99:180,101:181,192:$V6},o($VH,[2,191]),o($VH,[2,116]),o($VO,[2,117],{110:249,109:264,23:$VK,73:$VL,74:$VM}),{22:265,111:266,192:$V6},{22:267,111:268,192:$V6},{22:269,111:270,192:$V6},{106:[1,271]},{18:[2,100]},{18:[2,27]},{14:$V7,18:[2,28],22:30,26:234,35:272,192:$V6},{18:[2,26]},{18:[2,135]},{18:[2,136]},{18:[1,273]},{15:[1,274]},{106:[2,245],176:$VJ,206:275},{18:[2,105]},o($VO,[2,118]),o($VP,[2,119],{180:$VQ}),o($VP,[2,120]),o($VP,[2,121],{180:$VQ}),o($VP,[2,122]),o($VP,[2,123],{180:$VQ}),o($VP,[2,124]),o($VN,[2,112]),{18:[2,29]},o($VF,[2,128]),{14:$V7,18:[2,129],22:30,26:217,105:$VG,113:218,115:261,116:277,117:216,192:$V6},{106:[2,246]},{14:$Vb,22:152,24:113,105:$Vc,120:55,121:56,183:281,185:278,186:279,188:280,189:$VR,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},{18:[2,130]},{182:[1,283]},{176:$VS,182:[2,202],187:284},o($VT,[2,206],{110:249,109:286,23:$VK,73:$VL,74:$VM}),o($VC,[2,208]),o($VC,[2,209]),o($VP,[2,201]),{182:[2,203]},{14:$Vb,22:152,24:113,105:$Vc,120:55,121:56,183:281,186:287,188:280,189:$VR,192:$V6,193:$Vd,194:$Ve,195:$Vf,196:$Vg,197:$Vh,198:$Vi},o($VT,[2,207]),{176:$VS,182:[2,204],187:288},{182:[2,205]}],
defaultActions: {2:[2,1],3:[2,2],18:[2,3],19:[2,5],46:[2,80],51:[2,17],117:[2,32],118:[2,68],132:[2,14],133:[2,19],135:[2,233],140:[2,239],142:[2,34],143:[2,70],162:[2,193],169:[2,196],171:[2,21],172:[2,23],185:[2,235],186:[2,241],198:[2,103],207:[2,198],211:[2,82],212:[2,94],225:[2,107],241:[2,132],243:[2,244],254:[2,100],255:[2,27],257:[2,26],258:[2,135],259:[2,136],263:[2,105],272:[2,29],275:[2,246],277:[2,130],284:[2,203],288:[2,205]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const KEYWORDS_BY_LEVEL = [ 
        new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']), // level 0
        { // level 1
            'schema': new Set(['entities', 'views']),
            'entity': new Set(['with', 'has', 'key', 'index', 'data', 'interface']),
            'dataset': new Set(['contains', 'with'])
        }            
    ];
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['key'])
    ];

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc) {
            console.log(loc);
            console.log('indents:', this.indents.join(' -> '));
            console.log('current indent:', this.indent, 'current dedented:', this.dedented);            
            console.log('comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
            console.log();
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {
            return this.enterState('object');
        }

        exitObject() {
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    var KEYWORDS = new Set([        
        'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary', 'datetime', 'date', 'time', 'year', 'timestamp', 'json', 'xml', 'enum', 'csv',
        'exact', 'unsigned', "only", "fixedLength",
        "import", "const", "type", "entity", "schema", "database", "relation", "default", "auto", "entities", "data",
        "with", "has", "have", "key", "index", "as", "unique", "for",
        "every", "may", "a", "several", "many", "great", "of", "one", "to", "an",
        "optional", "readOnly", "fixedValue", "forceUpdate",
        "interface", "accept", "do", "select", "where", "return", "exists", "null", "otherwise", "unless", "find", "by", "case",
        "skip", "limit", "update", "create", "delete", "set", "throw", "error",
        "view", "order", "list", "asc", "desc", "views", "group", "skip",
        "document", "contains", "being", "which"
    ]);    

    var state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 16;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');                                                            

                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 18;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 15;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 15;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = yy_.yytext.substr(4, yy_.yytext.length-9).trim();
                            return 197;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 14;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 14;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 14;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');
                                state.indent = 0;

                                return 15;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:return 196;
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 194;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 193;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 193;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 190;
                           
break;
case 24:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 189;
                           
break;
case 25:
                                return 'COLUMNS';
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 195;
                           
break;
case 28:        
                                if (!state.lastState) {
                                    if (KEYWORDS_BY_LEVEL[0].has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}');                                     

                                if (state.lastState === 'schema') {
                                    if (state.hasIndent && CHILD_KEYWORD_START_STATE.has(this.topState(1)) && KEYWORDS_BY_LEVEL[1]['schema'].has(yy_.yytext)) {
                                        state.enterState('schema.' + yy_.yytext);
                                        return yy_.yytext;
                                    }
                                } else if (state.lastState === 'type') {
                                    state.enterState('type.name');
                                    return 192;
                                } else if (state.lastState === 'type.name') {
                                    state.enterState('type.info');

                                    if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                        return yy_.yytext;
                                    }
                                } else if (state.lastState === 'entity') {                                    
                                    if (state.hasIndent && CHILD_KEYWORD_START_STATE.has(this.topState(1)) && KEYWORDS_BY_LEVEL[1]['entity'].has(yy_.yytext)) {
                                        state.enterState('entity.' + yy_.yytext);
                                        return yy_.yytext;
                                    } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                        return yy_.yytext;
                                    } 
                                } else if (state.lastState === 'entity.index') {
                                    if (yy_.yytext === 'unique') return yy_.yytext;
                                }                        

                                return 192;
                            
break;
case 29:return yy_.yytext;
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@(((((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:((((((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))\.\*))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:(((_|(([A-Z]))|(([a-z]))))(((_|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((~|,|:|\|>|--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/,/^(?:((not|and|or|xor)|(mod|div)|(in|is|like)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}