/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,14],$V3=[1,13],$V4=[1,17],$V5=[5,13,19,25,36,79],$V6=[1,25],$V7=[1,31],$V8=[1,43],$V9=[15,23,42,73,74,78,89,121,122,125,127,135,162,188,204,216],$Va=[1,48],$Vb=[1,58],$Vc=[1,52],$Vd=[1,53],$Ve=[1,54],$Vf=[1,57],$Vg=[1,59],$Vh=[1,60],$Vi=[1,61],$Vj=[15,23,73,74],$Vk=[2,61],$Vl=[2,92],$Vm=[1,98],$Vn=[15,23,73,74,188,194,211,216],$Vo=[1,107],$Vp=[1,122],$Vq=[1,120],$Vr=[1,121],$Vs=[15,23,73,74,89],$Vt=[15,23,73,74,89,204],$Vu=[1,124],$Vv=[1,136],$Vw=[1,137],$Vx=[1,138],$Vy=[1,139],$Vz=[1,140],$VA=[1,141],$VB=[1,142],$VC=[1,148],$VD=[1,153],$VE=[188,211,216],$VF=[2,196],$VG=[18,88,90,93,104,128,130,136],$VH=[1,174],$VI=[1,189],$VJ=[23,73,74,188,194],$VK=[15,135,162],$VL=[188,211],$VM=[1,223],$VN=[1,224],$VO=[1,225],$VP=[1,226],$VQ=[1,229],$VR=[15,89],$VS=[15,127],$VT=[1,265],$VU=[15,125,127],$VV=[1,284],$VW=[1,282],$VX=[1,283],$VY=[1,287],$VZ=[15,89,188,194],$V_=[15,23,73,74,89,188,194],$V$=[1,308],$V01=[1,313],$V11=[1,316],$V21=[188,194];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"import":13,"STRING":14,"NEWLINE":15,"INDENT":16,"import_statement_block":17,"DEDENT":18,"const":19,"const_statement_item":20,"const_statement_block":21,"identifier":22,"=":23,"literal":24,"schema":25,"identifier_or_string":26,"schema_statement_block":27,"comment_or_not":28,"schema_entities":29,"schema_views_or_not":30,"schema_views":31,"entities":32,"schema_entities_block":33,"views":34,"schema_views_block":35,"type":36,"type_statement_item":37,"type_statement_block":38,"type_base":39,"type_info_or_not":40,"type_modifiers_or_not":41,":":42,"types":43,"int_keyword":44,"number_keyword":45,"text_keyword":46,"bool_keyword":47,"binary_keyword":48,"datetime_keyword":49,"any":50,"enum":51,"array":52,"object":53,"int":54,"integer":55,"number":56,"float":57,"decimal":58,"text":59,"string":60,"bool":61,"boolean":62,"blob":63,"binary":64,"buffer":65,"datetime":66,"timestamp":67,"type_infos":68,"type_info":69,"narrow_function_call":70,"type_modifiers":71,"type_modifier":72,"~":73,"|>":74,"entity_statement_header":75,"entity_statement_block":76,"entity_statement_header0":77,"extends":78,"entity":79,"entity_sub_items":80,"entity_sub_item":81,"with_features":82,"has_fields":83,"associations_statement":84,"key_statement":85,"index_statement":86,"data_statement":87,"interfaces_statement":88,"--":89,"with":90,"with_features_block":91,"feature_inject":92,"has":93,"has_fields_block":94,"field_item":95,"field_item_body":96,"field_comment_or_not":97,"modifiable_param":98,"type_base_or_not":99,"field_modifiers_or_not":100,"field_modifiers":101,"field_modifier":102,"general_function_call":103,"associations":104,"associations_block":105,"association_item":106,"hasOne":107,"association_item_option0":108,"association_item_option1":109,"hasMany":110,"association_item_option2":111,"association_item_option3":112,"association_item_option4":113,"refersTo":114,"association_item_option5":115,"association_item_option6":116,"belongsTo":117,"association_item_option7":118,"association_item_option8":119,"association_through":120,"through":121,"connected":122,"by":123,"association_as":124,"as":125,"association_optional":126,"optional":127,"key":128,"array_of_identifier_or_string":129,"index":130,"index_item":131,"index_statement_block":132,"index_item_body":133,"index_item_option0":134,"unique":135,"data":136,"inline_object":137,"inline_array":138,"dataset_statement":139,"dataset":140,"dataset_statement_block":141,"contains":142,"dataset_statement_block2":143,"document_entity_join":144,"dataset_entity_join":145,"being":146,"identifier_string_or_dotname":147,"of":148,"which":149,"view_statement":150,"view":151,"view_statement_block":152,"view_main_entity":153,"accept_or_not":154,"view_selection_or_not":155,"group_by_or_not":156,"order_by_or_not":157,"skip_or_not":158,"limit_or_not":159,"view_joinings_or_not":160,"view_joinings":161,"is":162,"article_keyword":163,"view_entity_target":164,"list":165,"view_selection":166,"selection_keyword":167,"conditional_expression":168,"view_selection_block":169,"a":170,"an":171,"the":172,"one":173,"where":174,"when":175,"to":176,"be":177,"selected":178,"group":179,"identifier_string_or_dotname_list":180,"order":181,"order_by_list":182,"order_by_block":183,"order_by_clause":184,"asc":185,"desc":186,"order_by_list0":187,",":188,"skip":189,"value":190,"limit":191,"(":192,"nfc_param_list":193,")":194,"nfc_param":195,"nfc_param_list0":196,"gfc_param_list":197,"gfc_param":198,"gfc_param_list0":199,"gfc_param0":200,"REFERENCE":201,"DOTNAME":202,"identifier_string_or_dotname_list0":203,"NAME":204,"INTEGER":205,"FLOAT":206,"BOOL":207,"REGEXP":208,"SCRIPT":209,"{":210,"}":211,"kv_pairs":212,"kv_pair_item":213,"kv_pairs0":214,"[":215,"]":216,"value_list":217,"value_list0":218,"identifier_or_string_list":219,"identifier_or_string_list0":220,"simple_expression":221,"logical_expression":222,"unary_expression":223,"binary_expression":224,"exists":225,"not":226,"null":227,">":228,"<":229,">=":230,"<=":231,"!=":232,"in":233,"logical_expression_right":234,"logical_operators":235,"and":236,"or":237,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"import",14:"STRING",15:"NEWLINE",16:"INDENT",18:"DEDENT",19:"const",23:"=",25:"schema",32:"entities",34:"views",36:"type",42:":",50:"any",51:"enum",52:"array",53:"object",54:"int",55:"integer",56:"number",57:"float",58:"decimal",59:"text",60:"string",61:"bool",62:"boolean",63:"blob",64:"binary",65:"buffer",66:"datetime",67:"timestamp",73:"~",74:"|>",78:"extends",79:"entity",88:"interfaces_statement",89:"--",90:"with",93:"has",104:"associations",107:"hasOne",110:"hasMany",114:"refersTo",117:"belongsTo",121:"through",122:"connected",123:"by",125:"as",127:"optional",128:"key",130:"index",135:"unique",136:"data",140:"dataset",142:"contains",144:"document_entity_join",146:"being",148:"of",149:"which",151:"view",154:"accept_or_not",161:"view_joinings",162:"is",165:"list",170:"a",171:"an",172:"the",173:"one",174:"where",175:"when",176:"to",177:"be",178:"selected",179:"group",181:"order",185:"asc",186:"desc",188:",",189:"skip",191:"limit",192:"(",194:")",201:"REFERENCE",202:"DOTNAME",204:"NAME",205:"INTEGER",206:"FLOAT",207:"BOOL",208:"REGEXP",209:"SCRIPT",210:"{",211:"}",215:"[",216:"]",225:"exists",226:"not",227:"null",228:">",229:"<",230:">=",231:"<=",232:"!=",233:"in",236:"and",237:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[17,2],[17,3],[9,3],[9,5],[20,3],[21,2],[21,3],[11,6],[27,3],[30,0],[30,1],[29,5],[33,2],[33,3],[31,5],[35,2],[35,3],[10,3],[10,5],[37,4],[38,2],[38,3],[39,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[44,1],[44,1],[45,1],[45,1],[45,1],[46,1],[46,1],[47,1],[47,1],[48,1],[48,1],[48,1],[49,1],[49,1],[40,0],[40,1],[68,1],[68,2],[69,1],[69,1],[41,0],[41,1],[71,1],[71,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[12,2],[12,5],[75,1],[75,3],[77,2],[76,2],[80,1],[80,2],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[28,0],[28,3],[82,5],[91,2],[91,3],[83,5],[94,2],[94,3],[95,2],[97,0],[97,2],[96,1],[99,0],[99,1],[100,0],[100,1],[101,1],[101,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[84,5],[105,2],[105,3],[106,4],[106,5],[106,4],[106,4],[120,2],[120,3],[124,2],[126,1],[85,3],[85,3],[86,3],[86,5],[132,2],[132,3],[131,1],[131,3],[133,1],[133,1],[87,3],[87,3],[139,6],[141,3],[141,4],[143,3],[143,4],[145,3],[145,7],[150,6],[152,8],[160,0],[160,1],[153,3],[153,4],[164,1],[164,2],[155,0],[155,1],[166,3],[166,5],[163,1],[163,1],[163,1],[163,1],[167,2],[167,2],[167,3],[167,2],[167,1],[169,2],[169,3],[156,0],[156,4],[157,0],[157,4],[157,6],[183,2],[183,3],[184,1],[184,2],[184,2],[182,1],[182,2],[187,2],[187,3],[158,0],[158,3],[159,0],[159,3],[98,4],[92,1],[92,1],[70,4],[193,1],[193,2],[196,2],[196,3],[195,1],[195,1],[103,4],[197,1],[197,2],[199,2],[199,3],[198,1],[198,2],[200,1],[200,1],[147,1],[147,1],[147,1],[180,1],[180,2],[203,2],[203,3],[26,1],[26,1],[22,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[137,2],[137,3],[213,3],[213,3],[212,1],[212,2],[214,2],[214,3],[138,2],[138,3],[217,1],[217,2],[218,2],[218,3],[129,3],[219,1],[219,2],[220,2],[220,3],[190,1],[190,1],[168,1],[168,1],[221,1],[221,1],[221,3],[223,2],[223,3],[223,3],[223,4],[223,4],[224,3],[224,3],[224,3],[224,3],[224,3],[224,3],[224,3],[222,2],[222,3],[234,2],[235,1],[235,1],[108,0],[108,1],[109,0],[109,1],[111,0],[111,1],[112,0],[112,1],[113,0],[113,1],[115,0],[115,1],[116,0],[116,1],[118,0],[118,1],[119,0],[119,1],[134,0],[134,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 11:
this.$ = state.dump('import').import($$[$0-1]) ;
break;
case 13:
this.$ = state.import($$[$0-1]);
break;
case 14:
this.$ = state.import($$[$0-2]);
break;
case 17:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 20:
this.$ = state.defineSchema($$[$0-4], $$[$0-1], _$[$0-5].first_line);
break;
case 21:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:
this.$ = { entities: $$[$0-1] };
break;
case 25:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 26:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 27:
this.$ = { views: $$[$0-1] };
break;
case 28: case 95: case 117: case 131: case 142: case 167: case 174:
this.$ = [ $$[$0-1] ];
break;
case 29: case 96: case 118: case 132: case 143: case 168: case 175:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 32:
            
            if (BUILTIN_TYPES.has($$[$0-3])) throw new Error('Cannot use built-in type "' + $$[$0-3] + '" as a custom type name. Line: ' + _$[$0-3].first_line);
            // default as text
            state.defineType($$[$0-3], Object.assign({type: 'text'}, $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 35: case 81: case 150: case 230:
this.$ = $$[$0];
break;
case 36:
this.$ = { type: 'integer' };
break;
case 37:
this.$ = { type: 'number' }    ;
break;
case 38:
this.$ = { type: 'text' };
break;
case 39:
this.$ = { type: 'boolean' };
break;
case 40:
this.$ = { type: 'binary' };
break;
case 41:
this.$ = { type: 'datetime' };
break;
case 42:
this.$ = { type: 'any' };
break;
case 43:
this.$ = { type: 'enum' };
break;
case 44:
this.$ = { type: 'array' };
break;
case 45:
this.$ = { type: 'object' };
break;
case 46:
this.$ = { type: $$[$0] };
break;
case 64: case 82: case 100: case 229: case 231:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 65:
this.$ = { [$$[$0]]: true };
break;
case 66:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 68: case 107:
this.$ = { modifiers: $$[$0] };
break;
case 69: case 108: case 179: case 181: case 191: case 193: case 198: case 200: case 209: case 211: case 234: case 236: case 239: case 241:
this.$ = [ $$[$0] ];
break;
case 70: case 109: case 180: case 182: case 192: case 194: case 199: case 201: case 212: case 235: case 237: case 240: case 242:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 71: case 110:
this.$ = state.normalizeValidator($$[$0]);
break;
case 72: case 111:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args);
break;
case 73: case 112:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 74: case 113:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args);
break;
case 75: case 114:
this.$ = state.normalizeActivator($$[$0]);
break;
case 76: case 115:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args);
break;
case 77:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 78:
this.$ = state.defineEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]), _$[$0-4].first_line);
break;
case 79:
this.$ = [ $$[$0], {} ];
break;
case 80:
this.$ = [ $$[$0-2], { base: $$[$0] } ];
break;
case 84:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 93:
this.$ = { comment: $$[$0-1] };
break;
case 94:
this.$ = { features: $$[$0-1] };
break;
case 97:
this.$ = { fields: $$[$0-1] };
break;
case 98:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 99:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 102:
this.$ = { comment: $$[$0] };
break;
case 116:
this.$ = { associations: $$[$0-1] };
break;
case 119:
this.$ = { type: 'hasOne', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 120:
this.$ = { type: 'hasMany', destEntity: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 121:
this.$ = { type: 'refersTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 122:
this.$ = { type: 'belongsTo', destEntity: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 123: case 124:
this.$ = { connectedBy: $$[$0] };
break;
case 125:
this.$ = { srcField: $$[$0] };
break;
case 126:
this.$ = { optional: true };
break;
case 127: case 128:
this.$ = { key: $$[$0-1] };
break;
case 129:
this.$ = { indexes: [$$[$0-1]] };
break;
case 130:
this.$ = { indexes: $$[$0-1] };
break;
case 134:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 135: case 136:
this.$ = { fields: $$[$0] };
break;
case 137: case 138:
this.$ = { data: $$[$0-1] };
break;
case 139:
this.$ = state.defineDataset($$[$0-4], $$[$0-1]);
break;
case 140:
this.$ = { entity: $$[$0-1] };
break;
case 141:
this.$ = { entity: $$[$0-2], joinWith: $$[$0] };
break;
case 144:
this.$ = { entity: $$[$0-2], on: { left: $$[$0], right: '$key' } };
break;
case 145:
this.$ = { dataset: $$[$0-6], on: { left: $$[$0], right: $$[$0-2] } };
break;
case 146:
this.$ = state.defineView($$[$0-4], $$[$0-1]);
break;
case 147:
this.$ = Object.assign({}, $$[$0-7], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 151:
this.$ = Object.assign({}, $$[$0-1], { isList: true });
break;
case 152:
this.$ = { entity: $$[$0] };
break;
case 153:
this.$ = { dataset: $$[$0-1] };
break;
case 156:
this.$ = { where: [ $$[$0-1] ] };
break;
case 157:
this.$ = { where: $$[$0-1] };
break;
case 170:
this.$ = { groupBy: $$[$0-1] };
break;
case 172: case 173:
this.$ = { orderBy: $$[$0-1] };
break;
case 176:
this.$ = { field: $$[$0], ascend: true };
break;
case 177:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 178:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 184:
this.$ = { skip: $$[$0-1] };
break;
case 186:
this.$ = { limit: $$[$0-1] };
break;
case 187:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 190: case 197:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 196:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 203:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 210:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 224:
this.$ = {};
break;
case 225: case 233: case 238: case 249: case 263:
this.$ = $$[$0-1];
break;
case 226: case 227:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 232:
this.$ = [];
break;
case 244:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 250:
 this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] }; 
break;
case 251:
 this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] }; 
break;
case 252:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] }; 
break;
case 253:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] }; 
break;
case 254:
 this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }; 
break;
case 255:
 this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] }; 
break;
case 256:
 this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] }; 
break;
case 257:
 this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] }; 
break;
case 258:
 this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] }; 
break;
case 259:
 this.$ = { oolType: 'BinaryExpression', operator: '=', left: $$[$0-2], right: $$[$0] }; 
break;
case 260:
 this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] }; 
break;
case 261:
 this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] }; 
break;
case 262:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0]);
break;
case 264:
this.$ = Object.assign({ oolType: 'BinaryExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 265:
this.$ = { operator: 'and' };
break;
case 266:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,25:$V2,36:$V3,75:15,77:16,79:$V4},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,18]},{5:[2,4],6:19,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,25:$V2,36:$V3,75:15,77:16,79:$V4},o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),o($V5,[2,9]),o($V5,[2,10]),{14:[1,20],15:[1,21]},{15:[1,23],20:22,22:24,204:$V6},{15:[1,27],22:28,37:26,204:$V6},{14:$V7,22:30,26:29,204:$V6},{15:[1,32]},{15:[2,79],78:[1,33]},{14:$V7,22:30,26:34,204:$V6},{1:[2,3]},{5:[2,5]},{15:[1,35]},{16:[1,36]},{15:[1,37]},{16:[1,38]},{23:[1,39]},o([15,23,42,73,74,78,89,121,122,125,127,135,162,188,192,194,204,211,216],[2,215]),{15:[1,40]},{16:[1,41]},{39:42,42:$V8},{15:[1,44]},o($V9,[2,213]),o($V9,[2,214]),o($V5,[2,77],{16:[1,45]}),{14:$V7,22:30,26:46,204:$V6},o([15,78],[2,81]),o($V5,[2,11]),{14:$Va,17:47},o($V5,[2,15]),{20:50,21:49,22:24,204:$V6},{14:$Vb,24:51,137:55,138:56,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},o($V5,[2,30]),{22:28,37:63,38:62,204:$V6},o($Vj,$Vk,{40:64,68:65,69:66,22:67,70:68,204:$V6}),{14:$V7,22:30,26:80,43:69,44:70,45:71,46:72,47:73,48:74,49:75,50:[1,76],51:[1,77],52:[1,78],53:[1,79],54:[1,81],55:[1,82],56:[1,83],57:[1,84],58:[1,85],59:[1,86],60:[1,87],61:[1,88],62:[1,89],63:[1,90],64:[1,91],65:[1,92],66:[1,93],67:[1,94],204:$V6},{16:[1,95]},o([88,90,93,104,128,130,136],$Vl,{76:96,28:97,89:$Vm}),{15:[2,80]},{18:[1,99]},{15:[1,100]},{18:[1,101]},{15:[1,102]},{15:[2,17]},o($Vn,[2,216]),o($Vn,[2,217]),o($Vn,[2,218]),o($Vn,[2,219]),o($Vn,[2,220]),o($Vn,[2,221]),o($Vn,[2,222]),o($Vn,[2,223]),{14:$V7,22:30,26:106,204:$V6,205:$Vo,211:[1,103],212:104,213:105},{14:$Vb,22:114,24:113,70:112,137:55,138:56,190:110,195:111,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi,216:[1,108],217:109},{18:[1,115]},{15:[1,116]},{15:[2,67],23:$Vp,41:117,71:118,72:119,73:$Vq,74:$Vr},o($Vs,[2,62]),o($Vs,[2,63],{69:66,22:67,70:68,68:123,204:$V6}),o($Vt,[2,65],{192:$Vu}),o($Vt,[2,66]),o($Vt,[2,35]),o($Vt,[2,36]),o($Vt,[2,37]),o($Vt,[2,38]),o($Vt,[2,39]),o($Vt,[2,40]),o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),o($Vt,[2,45]),o($Vt,[2,46]),o($Vt,[2,47]),o($Vt,[2,48]),o($Vt,[2,49]),o($Vt,[2,50]),o($Vt,[2,51]),o($Vt,[2,52]),o($Vt,[2,53]),o($Vt,[2,54]),o($Vt,[2,55]),o($Vt,[2,56]),o($Vt,[2,57]),o($Vt,[2,58]),o($Vt,[2,59]),o($Vt,[2,60]),{27:125,28:126,32:$Vl,89:$Vm},{18:[1,127]},{80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:135,88:$Vv,90:$Vw,93:$Vx,104:$Vy,128:$Vz,130:$VA,136:$VB},{14:[1,143]},o($V5,[2,12]),{14:$Va,17:144,18:[2,13]},o($V5,[2,16]),{18:[2,18],20:50,21:145,22:24,204:$V6},o($Vn,[2,224]),{211:[1,146]},{188:$VC,211:[2,228],214:147},{42:[1,149]},{42:[1,150]},o($Vn,[2,232]),{216:[1,151]},{188:$VD,216:[2,234],218:152},o($VE,[2,243]),o($VE,[2,244]),o([23,73,74,188,194,211,216],[2,195]),o($VE,$VF,{192:$Vu}),o($V5,[2,31]),{18:[2,33],22:28,37:63,38:154,204:$V6},{15:[2,32]},{15:[2,68]},{15:[2,69],23:$Vp,71:155,72:119,73:$Vq,74:$Vr},{22:156,70:157,204:$V6},{22:158,70:159,204:$V6},{22:160,70:161,204:$V6},o($Vs,[2,64]),{14:$Vb,22:164,24:113,137:55,138:56,193:162,195:163,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},{18:[1,165]},{29:166,32:[1,167]},o($V5,[2,78]),{18:[2,82]},{18:[2,83],80:168,81:129,82:130,83:131,84:132,85:133,86:134,87:135,88:$Vv,90:$Vw,93:$Vx,104:$Vy,128:$Vz,130:$VA,136:$VB},o($VG,[2,85]),o($VG,[2,86]),o($VG,[2,87]),o($VG,[2,88]),o($VG,[2,89]),o($VG,[2,90]),o($VG,[2,91]),{15:[1,169]},{15:[1,170]},{15:[1,171]},{14:$V7,22:30,26:172,129:173,204:$V6,215:$VH},{14:$V7,15:[1,176],22:30,26:178,129:179,131:175,133:177,204:$V6,215:$VH},{137:180,138:181,210:$Vh,215:$Vi},{15:[1,182]},{18:[2,14]},{18:[2,19]},o($Vn,[2,225]),{211:[2,229]},{14:$V7,22:30,26:106,204:$V6,205:$Vo,213:183},{14:$Vb,22:114,24:113,70:112,137:55,138:56,190:184,195:111,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},{14:$Vb,22:114,24:113,70:112,137:55,138:56,190:185,195:111,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},o($Vn,[2,233]),{216:[2,235]},{14:$Vb,22:114,24:113,70:112,137:55,138:56,190:186,195:111,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},{18:[2,34]},{15:[2,70]},o($Vj,[2,71],{192:$Vu}),o($Vj,[2,72]),o($Vj,[2,73],{192:$Vu}),o($Vj,[2,74]),o($Vj,[2,75],{192:$Vu}),o($Vj,[2,76]),{194:[1,187]},{188:$VI,194:[2,191],196:188},o($VJ,$VF),o($V5,[2,20]),{18:[2,22],30:190,31:191,34:[1,192]},{15:[1,193]},{18:[2,84]},{16:[1,194]},{16:[1,195]},{16:[1,196]},{15:[1,197]},{15:[1,198]},{14:$V7,22:30,26:200,204:$V6,219:199},{15:[1,201]},{16:[1,202]},{15:[2,133],134:203,135:[2,285],162:[1,204]},o($VK,[2,135]),o($VK,[2,136]),{15:[1,205]},{15:[1,206]},o([32,88,90,93,104,128,130,136],[2,93]),{188:$VC,211:[2,230],214:207},o($VL,[2,226]),o($VL,[2,227]),{188:$VD,216:[2,236],218:208},o([15,23,73,74,89,188,204,211,216],[2,190]),{194:[2,192]},{14:$Vb,22:164,24:113,137:55,138:56,195:209,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},{18:[2,21]},{18:[2,23]},{15:[1,210]},{16:[1,211]},{22:214,70:215,91:212,92:213,204:$V6},{14:$V7,22:30,26:220,94:216,95:217,96:218,98:219,204:$V6},{105:221,106:222,107:$VM,110:$VN,114:$VO,117:$VP},o($VG,[2,127]),o($VG,[2,128]),{216:[1,227]},{188:$VQ,216:[2,239],220:228},o($VG,[2,129]),{14:$V7,22:30,26:178,129:179,131:231,132:230,133:177,204:$V6,215:$VH},{135:[1,232]},{135:[2,286]},o($VG,[2,137]),o($VG,[2,138]),{211:[2,231]},{216:[2,237]},{188:$VI,194:[2,193],196:233},{16:[1,234]},{14:$V7,22:30,26:236,33:235,204:$V6},{18:[1,237]},{15:[1,238]},{15:[2,188],192:$Vu},{15:[2,189]},{18:[1,239]},{15:[1,240]},{15:[2,101],89:[1,242],97:241},o($VR,[2,103]),o($Vt,[2,104],{99:243,39:244,42:$V8}),{18:[1,245]},{15:[1,246]},{14:$V7,22:30,26:247,204:$V6},{14:$V7,22:30,26:248,204:$V6},{14:$V7,22:30,26:249,204:$V6},{14:$V7,22:30,26:250,204:$V6},o($VK,[2,238]),{216:[2,240]},{14:$V7,22:30,26:251,204:$V6},{18:[1,252]},{15:[1,253]},{15:[2,134]},{194:[2,194]},{14:$V7,22:30,26:255,35:254,204:$V6},{18:[1,256]},{15:[1,257]},o($VG,[2,94]),{18:[2,95],22:214,70:215,91:258,92:213,204:$V6},o($VG,[2,97]),{14:$V7,18:[2,98],22:30,26:220,94:259,95:217,96:218,98:219,204:$V6},{15:[2,100]},{14:[1,260]},o($Vs,$Vk,{68:65,69:66,22:67,70:68,40:261,204:$V6}),o($Vt,[2,105]),o($VG,[2,116]),{18:[2,117],105:262,106:222,107:$VM,110:$VN,114:$VO,117:$VP},o($VS,[2,267],{108:263,124:264,125:$VT}),o($VU,[2,271],{111:266,120:267,121:[1,268],122:[1,269]}),o($VS,[2,277],{115:270,124:271,125:$VT}),o($VS,[2,281],{118:272,124:273,125:$VT}),{188:$VQ,216:[2,241],220:274},o($VG,[2,130]),{14:$V7,18:[2,131],22:30,26:178,129:179,131:231,132:275,133:177,204:$V6,215:$VH},{18:[1,276]},{15:[1,277]},o([18,34],[2,24]),{14:$V7,18:[2,25],22:30,26:236,33:278,204:$V6},{18:[2,96]},{18:[2,99]},{15:[2,102]},o($VR,[2,106],{100:279,101:280,102:281,23:$VV,73:$VW,74:$VX}),{18:[2,118]},{15:[2,269],109:285,126:286,127:$VY},o($VS,[2,268]),{14:$V7,22:30,26:288,204:$V6},o($VS,[2,273],{112:289,124:290,125:$VT}),o($VU,[2,272]),{14:$V7,22:30,26:291,204:$V6},{123:[1,292]},{15:[2,279],116:293,126:294,127:$VY},o($VS,[2,278]),{15:[2,283],119:295,126:296,127:$VY},o($VS,[2,282]),{216:[2,242]},{18:[2,132]},{18:[2,27]},{14:$V7,18:[2,28],22:30,26:255,35:297,204:$V6},{18:[2,26]},o($VR,[2,187]),o($VR,[2,107]),o($VZ,[2,108],{102:281,101:298,23:$VV,73:$VW,74:$VX}),{22:299,103:300,204:$V6},{22:301,103:302,204:$V6},{22:303,103:304,204:$V6},{15:[2,119]},{15:[2,270]},{15:[2,126]},o($VS,[2,125]),{15:[2,275],113:305,126:306,127:$VY},o($VS,[2,274]),o($VU,[2,123]),{14:$V7,22:30,26:307,204:$V6},{15:[2,121]},{15:[2,280]},{15:[2,122]},{15:[2,284]},{18:[2,29]},o($VZ,[2,109]),o($V_,[2,110],{192:$V$}),o($V_,[2,111]),o($V_,[2,112],{192:$V$}),o($V_,[2,113]),o($V_,[2,114],{192:$V$}),o($V_,[2,115]),{15:[2,120]},{15:[2,276]},o($VU,[2,124]),{14:$Vb,22:164,24:113,137:55,138:56,195:312,197:309,198:310,200:311,201:$V01,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},{194:[1,314]},{188:$V11,194:[2,198],199:315},o($V21,[2,202],{102:281,101:317,23:$VV,73:$VW,74:$VX}),o($VJ,[2,204]),o($VJ,[2,205]),o($V_,[2,197]),{194:[2,199]},{14:$Vb,22:164,24:113,137:55,138:56,195:312,198:318,200:311,201:$V01,204:$V6,205:$Vc,206:$Vd,207:$Ve,208:$Vf,209:$Vg,210:$Vh,215:$Vi},o($V21,[2,203]),{188:$V11,194:[2,200],199:319},{194:[2,201]}],
defaultActions: {2:[2,1],3:[2,2],18:[2,3],19:[2,5],46:[2,80],51:[2,17],117:[2,32],118:[2,68],128:[2,82],144:[2,14],145:[2,19],147:[2,229],152:[2,235],154:[2,34],155:[2,70],168:[2,84],188:[2,192],190:[2,21],191:[2,23],204:[2,286],207:[2,231],208:[2,237],215:[2,189],228:[2,240],232:[2,134],233:[2,194],241:[2,100],258:[2,96],259:[2,99],260:[2,102],262:[2,118],274:[2,242],275:[2,132],276:[2,27],278:[2,26],285:[2,119],286:[2,270],287:[2,126],293:[2,121],294:[2,280],295:[2,122],296:[2,284],297:[2,29],305:[2,120],306:[2,276],315:[2,199],319:[2,201]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const KEYWORDS_BY_LEVEL = [ 
        new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']), // level 0
        { // level 1
            'schema': new Set(['entities', 'views']),
            'entity': new Set(['with', 'has', 'associations', 'key', 'index', 'data', 'interface']),
            'dataset': new Set(['contains', 'with'])
        },
        {
            'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'connected', 'by', 'through', 'as', 'optional']),
            'entity.index': new Set(['is', 'unique'])
        }            
    ];
    
    //statements can be in one line
    const ONE_LINE_KEYWORDS = [ 
        new Set(['import', 'type', 'const', 'entity']), // level
        new Set(['entity.key'])
    ];

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents > 0;
        }

        doIndent() {
            this.indents.push(this.indent);
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        dump(loc, token) {
            token ? console.log(loc, token) : console.log(loc);
            console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented);                   
            console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
            console.log();
            return this;
        }

        void() {
            return undefined;
        }

        val(value) {
            return value;
        }

        enterObject() {
            return this.enterState('object');
        }

        exitObject() {
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            this.stack.push(state);
            return this;
        }

        exitState(state) {
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }                
        
        normalizeReference(ref) {
            return { oolType: 'ObjectReference', name: ref.substr(1) };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if (t1 === 'object' || t2 === 'object') {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 16;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');  

                                state.dump('<EMPTY>. dedent');                                                            

                            } else {
                                //same indent
                                this.begin('INLINE');

                                if (!state.hasIndent) {
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }

                                    if (ONE_LINE_KEYWORDS[0].has(state.lastState)) {
                                        state.exitState(state.lastState);
                                    }     
                                }                                                                                

                                state.dump('<EMPTY>. same');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedented-- > 0) {
                                this.unput(yy_.yytext);                                        

                                if (state.lastState === 'type.info') {
                                    state.exitState('type.info');
                                }  

                                if (state.lastState === 'type.name') {
                                    state.exitState('type.name');
                                }  
                                
                                if (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }
                                
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');
                                return 18;

                            } else if (state.eof) {
                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 15;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                    //stack not empty   
                                    if (state.lastState === 'type.info') {
                                        state.exitState('type.info');
                                    }  

                                    if (state.lastState === 'type.name') {
                                        state.exitState('type.name');
                                    }  
                                    
                                    if (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }                      

                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 15;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            yy_.yytext = yy_.yytext.substr(4, yy_.yytext.length-9).trim();
                            return 209;
                        
break;
case 12:
                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 14;
                        
break;
case 13:
                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 14;
                        
break;
case 14:
                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 14;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');
                                state.indent = 0;

                                if (state.hasIndent && ONE_LINE_KEYWORDS[1].has(state.lastState)) {
                                    state.exitState(state.lastState);
                                }     

                                return 15;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:return 208;
break;
case 18:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 206;
                        
break;
case 19:
                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 205;
                        
break;
case 20:                            
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 205;
                        
break;
case 22:                                
                                return 'ELEMENT_ACCESS';
                           
break;
case 23:                                
                                return 202;
                           
break;
case 24:
                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 201;
                           
break;
case 25:
                                return 'COLUMNS';
                           
break;
case 26:
                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 207;
                           
break;
case 28:        
                                if (!state.lastState) {
                                    if (KEYWORDS_BY_LEVEL[0].has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext);                                     

                                switch (state.lastState) {
                                    case 'schema':
                                        if (state.hasIndent && CHILD_KEYWORD_START_STATE.has(this.topState(1)) && KEYWORDS_BY_LEVEL[1]['schema'].has(yy_.yytext)) {
                                            state.enterState('schema.' + yy_.yytext);
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'type': 
                                        state.enterState('type.name');
                                        return 204;

                                    case 'type.name':
                                        state.enterState('type.info');

                                        if (BUILTIN_TYPES.has(yy_.yytext)) {                                        
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity':
                                        if (state.hasIndent && CHILD_KEYWORD_START_STATE.has(this.topState(1)) && KEYWORDS_BY_LEVEL[1]['entity'].has(yy_.yytext)) {
                                            state.enterState('entity.' + yy_.yytext);                                                                        
                                            return yy_.yytext;
                                        } else if (!state.hasIndent && yy_.yytext === 'extends') {
                                            return yy_.yytext;
                                        } 
                                        break;

                                    case 'entity.index':
                                        if (KEYWORDS_BY_LEVEL[2]['entity.index'].has(yy_.yytext)) {
                                            return yy_.yytext;
                                        }
                                        break;

                                    case 'entity.associations':
                                        if (KEYWORDS_BY_LEVEL[2]['entity.associations'].has(yy_.yytext)) {
                                            return yy_.yytext;
                                        }
                                        break;                                      
                                }                                         

                                return 204;
                            
break;
case 29:return yy_.yytext;
break;
case 30:return yy_.yytext;
break;
case 31:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\.\*))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((~|,|:|\|>|--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/,/^(?:((not|and|or|xor)|(mod|div)|(in|is|like)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,31],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,31],"inclusive":true},"DEDENTED":{"rules":[9,31],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}