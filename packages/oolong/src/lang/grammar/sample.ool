type
  password : text maxLength(200)
  email : text maxLength(200) ~isEmail    
  phone : text maxLength(20) ~matches(/^((\+|00)\d+)?\d+(-\d+)?$/)
  userStatus : enum values(['inactive', 'active', 'disabled', 'forbidden', 'deleted'])
  name : text maxLength(20)

entity user
  -- 'User Credential';

  with
    autoId({ startFrom: 100000 })
    createTimestamp
    updateTimestamp
    logicalDeletion({ status: 'deleted' })
    stateTracking("status")
    atLeastOneNotNull([ 'email', 'mobile' ])

  has
    email 
    mobile : phone ~isMobilePhone(@latest.locale |> stringDasherize) |> normalizeMobile    
    status : userStatus default('inactive')
    profile -> personalProfile
    securityGroups -> [ securityGroup ]

  index
    email unique
    mobile unique

  interface
    validateUserCredential
      accept
        identity : text(200)
        password

      find the user with below cases 
        @identity ~isEmail => { email: @identity }
        @identity ~matches(/^(\+?\d{6,})$/) => { mobile: @identity | normalizeMobile }
        otherwise return { error: { message: 'invalid_identity' } }

      return @user unless
        @user not exists => { error: { message: 'user_not_found' } }
        @password | hashPassword(@user.passwordSalt) != @user.password => { error: { message: 'invalid_password' } }  

entity personalProfile extends profile
  -- 'Personal Profile'
  with
    updateTimestamp
  has    
    owner => user
    firstName : name optional
    middleName : name optional
    surName : name optional
    gender -> gender optional
    title -> personTitle optional
    dateOfBirth : datetime optional
  key owner

entity gender extends dictionary
  data {
    'M' : { name: 'male' },
    'F' : { name: 'female' },
    'U' : { name: 'unknown' }
  }

entity personTitle extends dictionary
  has
    maleCapable : bool default(true)
    femaleCapable : bool default(true)
  data {
    'MR' : { name: 'Mr', femaleCapable: false },
    'MRS' : { name: 'Mrs', maleCapable: false },
    'MS' : { name: 'Ms', maleCapable: false },
    'MISS' : { name: 'Miss', maleCapable: false },
    'DR': { name: 'Dr' }
  }