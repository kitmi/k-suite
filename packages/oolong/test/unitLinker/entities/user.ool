import '<oolong>/types'

type
  password : text maxLength(200)  
  userStatus : enum values("inactive", "active", "disabled", "forbidden", "deleted")  

entity user
  -- "User Credential"
  with
    autoId({"startFrom":100000})
    createTimestamp
    updateTimestamp
    logicalDeletion({"status":"deleted"})
    stateTracking("status")
    atLeastOneNotNull(["email","mobile"])

  has
    email -- "User Email"
    mobile : phone |~isMobilePhone(@latest.locale |>stringDasherize) |>normalizeMobile -- "User Mobile"
    password |>hashPassword(@latest.passwordSalt) -- "User Password"
    passwordSalt : text fixedLength(8) auto -- "User Password Salt"
    locale : text default("en_AU") -- "User Locale"
    isEmailVerified : boolean default(false)
    isMobileVerified : boolean default(false)
    status : userStatus default("inactive") -- "User Status"
    tag : array optional

  index
    email is unique
    mobile is unique

  data [
    {
      email: 'admin@levo.legal',
      mobile: '0412345678',
      password: '123456',
      isEmailVerified: true,
      isMobileVerified: true,
      status: 'active'
    }
  ]

  interface
    validateUserCredential
      accept
        identity : text maxLength(200)
        password

      findOne user :
        when @identity ~ isEmail => selectedBy { email: @identity }
        when @identity ~ matches(/^(\+?\d{6,})$/) => selectedBy { mobile: @identity }
        otherwise return { error: { message: 'invalid_identity' } }

      return @user unless
        when @user not exists => { error: { message: 'user_not_found' } }
        when @password |> hashPassword(@user.passwordSalt) != @user.password => { error: { message: 'invalid_password' } }
