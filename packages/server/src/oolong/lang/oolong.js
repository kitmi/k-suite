/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,24],$V5=[1,22],$V6=[1,19],$V7=[1,21],$V8=[1,20],$V9=[5,7,17,22,28,80,193,210,219,226],$Va=[1,35],$Vb=[1,34],$Vc=[1,36],$Vd=[1,33],$Ve=[1,43],$Vf=[1,49],$Vg=[1,51],$Vh=[1,52],$Vi=[7,18,26,35,59,60,61,63,79,88,98,108,109,123,124,125,126,128,131,132,133,160,175,177,187,197,199,203,219,224,237,246,247,253,254,255,267,268,282,283,285,286,287,288,289,290,294,295],$Vj=[2,28],$Vk=[1,64],$Vl=[7,18,26,35,60,61,63,79,88,108,109,123,124,125,126,128,131,132,133,175,219,224,237,253,254,255,267,268],$Vm=[1,75],$Vn=[18,28,55,244,247,256],$Vo=[7,79],$Vp=[1,79],$Vq=[1,89],$Vr=[1,83],$Vs=[1,90],$Vt=[1,84],$Vu=[1,85],$Vv=[1,88],$Vw=[1,91],$Vx=[7,131],$Vy=[1,99],$Vz=[1,97],$VA=[1,98],$VB=[7,26,88,108,109,123,124,125,126,128,131],$VC=[1,120],$VD=[21,95,98,134,138,140,143],$VE=[1,135],$VF=[1,136],$VG=[1,137],$VH=[1,138],$VI=[7,26,59,61,63,79,88,98,126,128,131,177,187,197,199,203,224,246,247,268,282,283,285,286,287,288,289,290,294,295],$VJ=[7,26,61,63,79,128,131,177,187,189,268,282,283,285,286,287,288,289,290,294,295],$VK=[1,150],$VL=[1,160],$VM=[1,167],$VN=[7,26,64,88,108,109,123,124,125,126,128,131],$VO=[7,26,40,88,108,109,123,124,125,126,128,131],$VP=[7,26,59,64,88,108,109,123,124,125,126,128,131],$VQ=[7,26,59,88,108,109,123,124,125,126,128,131],$VR=[21,98,134,138,140,143],$VS=[28,55,244,247,256],$VT=[1,209],$VU=[1,214],$VV=[7,26,61,63,79,177,187,268,282,283,285,286,287,288,289,290,294,295],$VW=[1,215],$VX=[1,220],$VY=[7,26,61,63,79,88,128,177,187,268,282,283,285,286,287,288,289,290,294,295],$VZ=[7,26,79,88,108,109,123,124,125,126,128,131],$V_=[1,239],$V$=[21,134,138,140,143],$V01=[7,197,199],$V11=[7,26,61,63,79,88,131,177,187,268,282,283,285,286,287,288,289,290,294,295],$V21=[7,26,61,63,79,88,128,131,177,187,268,282,283,285,286,287,288,289,290,294,295],$V31=[21,138,140,143],$V41=[2,167],$V51=[1,300],$V61=[63,177],$V71=[7,26,61,63,79,88,108,109,123,124,125,126,128,131,177,187,268,282,283,285,286,287,288,289,290,294,295],$V81=[1,309],$V91=[21,140,143],$Va1=[21,241,244,249,250],$Vb1=[21,158,239,241,244,249,250],$Vc1=[1,349],$Vd1=[7,237],$Ve1=[1,353],$Vf1=[21,143],$Vg1=[7,88,128,131],$Vh1=[1,376],$Vi1=[1,377],$Vj1=[1,378],$Vk1=[1,375],$Vl1=[7,88],$Vm1=[1,387],$Vn1=[61,63],$Vo1=[21,244,249,250],$Vp1=[7,128,131],$Vq1=[1,400],$Vr1=[7,35,108,128,131],$Vs1=[1,411],$Vt1=[2,178],$Vu1=[7,88,126],$Vv1=[21,249,250],$Vw1=[1,431],$Vx1=[1,435],$Vy1=[21,250],$Vz1=[7,187],$VA1=[1,466],$VB1=[1,467],$VC1=[7,61,187,294,295],$VD1=[1,499],$VE1=[7,63],$VF1=[7,61,187],$VG1=[18,28,55,59,60,175,244,247,253,254,255,256,262,267,283],$VH1=[1,560],$VI1=[1,563],$VJ1=[21,191],$VK1=[21,158,191],$VL1=[1,596],$VM1=[21,163];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"NEWLINE":7,"statement":8,"use_statement":9,"const_statement":10,"type_statement":11,"entity_statement":12,"schema_statement":13,"view_statement":14,"document_statement":15,"relation_statement":16,"import":17,"STRING":18,"INDENT":19,"use_statement_block":20,"DEDENT":21,"const":22,"const_statement_item":23,"const_statement_block":24,"identifier":25,"=":26,"literal":27,"type":28,"type_statement_item":29,"type_statement_block":30,"type_base_or_not":31,"default_value_or_not":32,"type_validators0_or_not":33,"type_base":34,":":35,"types":36,"int_type":37,"unsigned_or_not":38,"number_type":39,"exact":40,"text_type":41,"bool_keyword":42,"binary_type":43,"datetime":44,"date":45,"only":46,"time":47,"year":48,"timestamp":49,"json":50,"xml":51,"csv":52,"identifier_or_str_array":53,"identifier_or_string":54,"DOTNAME":55,"int_keyword":56,"int":57,"integer":58,"(":59,"INTEGER":60,")":61,"BYTES":62,",":63,"unsigned":64,"number":65,"text":66,"fixedLength":67,"bool":68,"boolean":69,"binary_keyword":70,"blob":71,"binary":72,"type_validators0":73,"type_validators":74,"default_value":75,"entity_statement_header":76,"entity_statement_block":77,"entity_statement_header0":78,"is":79,"entity":80,"comment_or_not":81,"with_stmt_or_not":82,"has_stmt_or_not":83,"key_stmt_or_not":84,"index_stmt_or_not":85,"data_stmt_or_not":86,"interface_stmt_or_not":87,"--":88,"with_stmt":89,"has_stmt":90,"key_stmt":91,"index_stmt":92,"data_stmt":93,"interface_stmt":94,"with":95,"feature_inject":96,"with_stmt_block":97,"has":98,"has_stmt_itm":99,"has_stmt_block":100,"has_stmt_item_body":101,"field_comment_or_not":102,"field_qualifiers_or_not":103,"with_validators_modifiers":104,"field_reference":105,"optional_qualifier_or_not":106,"concrete_default_value":107,"default":108,"auto":109,"function_call":110,"field_qualifiers":111,"field_modifiers0_or_not":112,"field_modifiers0":113,"variable_modifiers":114,"field_validators1_or_not":115,"field_validators1":116,"field_modifiers1_or_not":117,"field_modifiers1":118,"variable_modifier_or_not":119,"optional_qualifier":120,"field_qualifier":121,"field_restriction":122,"readOnly":123,"fixedValue":124,"forceUpdate":125,"optional":126,"variable_modifier":127,"|":128,"identifier_or_member_access":129,"type_validator":130,"~":131,"->":132,"<->":133,"key":134,"index_stmt_itm":135,"index_qualifiers":136,"unique":137,"index":138,"index_stmt_blk":139,"data":140,"inline_object":141,"inline_array":142,"interface":143,"interface_stmt_blk":144,"interface_def":145,"interface_def_body":146,"accept_or_not":147,"implementation":148,"return_or_not":149,"accept_statement":150,"accept":151,"parameter_with_modifier":152,"accept_block":153,"parameter":154,"with_type_default_value":155,"operation":156,"find_one_operation":157,"find":158,"one":159,"by":160,"case":161,"case_condition_block":162,"otherwise":163,"condition_as_result_expression":164,"conditional_expression":165,"update_operation":166,"update":167,"where_expr":168,"create_operation":169,"create":170,"delete_operation":171,"delete":172,"coding_block":173,"do":174,"{":175,"javascript":176,"}":177,"assign_operation":178,"set":179,"<-":180,"value":181,"simple_conditional_arrow_expr":182,"where":183,"where_expr_condition":184,"where_expr_condition_blk":185,"query_condition_expression":186,"=>":187,"return_expression":188,"unless":189,"return_condition_blk":190,"return":191,"concrete_value":192,"relation":193,"relation_statement_itm":194,"relation_statement_blk":195,"relation_statement_itm0":196,"to":197,"related_entity":198,"for":199,"indefinite_article":200,"relation_qualifier":201,"every":202,"may":203,"have":204,"several":205,"many":206,"a":207,"great":208,"of":209,"schema":210,"schema_statement_block":211,"schema_entities":212,"schema_views_or_not":213,"schema_views":214,"entities":215,"schema_entities_block":216,"views":217,"schema_views_block":218,"document":219,"document_statement_block":220,"contains":221,"document_statement_block2":222,"document_entity_join":223,"being":224,"which":225,"view":226,"view_statement_block":227,"view_main_entity":228,"view_selection_or_not":229,"group_by_or_not":230,"order_by_or_not":231,"skip_or_not":232,"limit_or_not":233,"view_joinings_or_not":234,"view_joinings":235,"view_entity_target":236,"list":237,"view_selection":238,"select":239,"view_selection_block":240,"group":241,"order_by_list":242,"order_by_block":243,"order":244,"order_by_clause":245,"asc":246,"desc":247,"order_by_list0":248,"skip":249,"limit":250,"identifier_or_member_access_list":251,"identifier_or_member_access_list0":252,"FLOAT":253,"BOOL":254,"REGEXP":255,"NAME":256,"an":257,"modifiable_value_list":258,"feature_param_list":259,"feature_param":260,"modifiable_value":261,"REFERENCE":262,"concrete_value_expression":263,"kv_pairs":264,"kv_pair_itm":265,"kv_pairs0":266,"[":267,"]":268,"value_list":269,"value_list0":270,"modifiable_value_list0":271,"feature_param_list0":272,"identifier_or_str_list":273,"identifier_or_str_list0":274,"logical_expression":275,"simple_expression":276,"logical_query_expression":277,"binary_expression":278,"throw_error_expression":279,"unary_expression":280,"throw":281,"exists":282,"not":283,"null":284,">":285,"<":286,">=":287,"<=":288,"!=":289,"in":290,"logical_expression_right":291,"logical_operators":292,"logical_query_expression_right":293,"and":294,"or":295,"column_range_list":296,"COLUMNS":297,"column_range_list0":298,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"NEWLINE",17:"import",18:"STRING",19:"INDENT",21:"DEDENT",22:"const",26:"=",28:"type",35:":",40:"exact",44:"datetime",45:"date",46:"only",47:"time",48:"year",49:"timestamp",50:"json",51:"xml",52:"csv",55:"DOTNAME",57:"int",58:"integer",59:"(",60:"INTEGER",61:")",62:"BYTES",63:",",64:"unsigned",65:"number",66:"text",67:"fixedLength",68:"bool",69:"boolean",71:"blob",72:"binary",79:"is",80:"entity",88:"--",95:"with",98:"has",108:"default",109:"auto",123:"readOnly",124:"fixedValue",125:"forceUpdate",126:"optional",128:"|",131:"~",132:"->",133:"<->",134:"key",137:"unique",138:"index",140:"data",143:"interface",151:"accept",158:"find",159:"one",160:"by",161:"case",163:"otherwise",167:"update",170:"create",172:"delete",174:"do",175:"{",176:"javascript",177:"}",179:"set",180:"<-",183:"where",187:"=>",189:"unless",191:"return",193:"relation",197:"to",199:"for",202:"every",203:"may",204:"have",205:"several",206:"many",207:"a",208:"great",209:"of",210:"schema",215:"entities",217:"views",219:"document",221:"contains",224:"being",225:"which",226:"view",235:"view_joinings",237:"list",239:"select",241:"group",244:"order",246:"asc",247:"desc",249:"skip",250:"limit",253:"FLOAT",254:"BOOL",255:"REGEXP",256:"NAME",257:"an",262:"REFERENCE",267:"[",268:"]",281:"throw",282:"exists",283:"not",284:"null",285:">",286:"<",287:">=",288:"<=",289:"!=",290:"in",294:"and",295:"or",297:"COLUMNS"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,1],[6,2],[6,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[9,3],[9,5],[20,2],[20,3],[10,3],[10,5],[23,3],[24,2],[24,3],[11,3],[11,5],[29,4],[31,0],[31,1],[34,2],[36,2],[36,1],[36,2],[36,1],[36,1],[36,1],[36,1],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[56,1],[56,1],[37,1],[37,4],[37,6],[37,4],[38,0],[38,1],[39,1],[39,4],[39,5],[39,6],[41,1],[41,4],[41,5],[42,1],[42,1],[43,1],[43,4],[43,5],[70,1],[70,1],[33,0],[33,1],[73,1],[32,0],[32,1],[30,2],[30,3],[12,2],[12,5],[76,1],[76,3],[78,2],[77,7],[81,0],[81,3],[82,0],[82,1],[83,0],[83,1],[84,0],[84,1],[85,0],[85,1],[86,0],[86,1],[87,0],[87,1],[89,3],[89,5],[97,2],[97,3],[90,3],[90,5],[99,2],[101,4],[101,3],[107,4],[75,1],[75,4],[75,1],[75,4],[75,5],[75,2],[103,0],[103,1],[112,0],[112,1],[113,1],[115,0],[115,1],[116,1],[117,0],[117,1],[118,1],[119,0],[119,1],[106,0],[106,1],[111,1],[111,2],[122,1],[122,1],[122,1],[102,0],[102,2],[121,1],[121,1],[121,1],[120,1],[114,1],[114,2],[127,2],[127,2],[74,1],[74,2],[130,2],[130,2],[105,2],[105,2],[100,2],[100,3],[91,3],[135,1],[135,1],[135,2],[136,2],[92,3],[92,5],[139,2],[139,3],[93,3],[93,3],[94,5],[144,1],[144,2],[145,5],[146,3],[147,0],[147,1],[150,3],[150,5],[153,2],[153,3],[152,3],[155,0],[155,1],[155,1],[155,2],[104,0],[104,1],[104,1],[104,2],[104,2],[104,3],[104,3],[104,4],[148,1],[148,2],[156,1],[157,9],[157,12],[157,6],[166,6],[169,5],[171,4],[173,5],[178,6],[162,2],[162,3],[168,2],[168,5],[184,1],[185,2],[185,3],[182,3],[149,0],[149,2],[149,6],[188,2],[190,4],[190,5],[16,3],[16,5],[195,2],[195,3],[194,1],[194,3],[194,4],[198,2],[196,4],[196,5],[201,1],[201,1],[201,1],[201,4],[13,6],[211,2],[213,0],[213,1],[212,5],[216,2],[216,3],[214,5],[218,2],[218,3],[15,6],[220,3],[220,4],[222,3],[222,4],[223,3],[223,7],[14,6],[227,8],[234,0],[234,1],[228,3],[228,4],[236,1],[236,2],[229,0],[229,1],[238,4],[238,6],[240,2],[240,3],[230,0],[230,4],[230,6],[231,0],[231,4],[231,6],[243,2],[243,3],[245,1],[245,2],[245,2],[242,1],[242,2],[248,2],[248,3],[232,0],[232,3],[233,0],[233,3],[251,1],[251,2],[252,2],[252,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[25,1],[25,1],[25,1],[25,1],[200,1],[200,1],[129,1],[129,1],[154,1],[154,1],[110,3],[110,4],[96,1],[96,3],[96,4],[260,1],[260,1],[181,1],[181,1],[181,1],[192,1],[192,1],[261,1],[261,1],[54,1],[54,1],[141,2],[141,3],[265,3],[265,3],[264,1],[264,2],[266,2],[266,3],[142,2],[142,3],[269,1],[269,2],[270,2],[270,3],[258,1],[258,2],[271,2],[271,3],[259,1],[259,2],[272,2],[272,3],[53,2],[53,3],[273,1],[273,2],[274,2],[274,3],[165,1],[165,1],[186,1],[186,1],[164,1],[164,1],[164,1],[276,1],[276,1],[276,1],[263,2],[263,2],[263,3],[263,3],[263,4],[263,4],[263,5],[279,2],[279,5],[279,5],[279,7],[280,2],[280,3],[280,3],[280,4],[280,4],[278,3],[278,3],[278,3],[278,3],[278,3],[278,3],[278,3],[275,2],[275,4],[291,2],[291,4],[277,2],[277,4],[293,2],[293,4],[292,1],[292,1],[296,1],[296,2],[298,2],[298,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 16: case 18:
 state.use($$[$0-1]); 
break;
case 19:
 state.use($$[$0-2]); 
break;
case 22:

            state.defConst($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 27:

            var n = $$[$0-3];
            if (state.isTypeExist(n)) throw new Error('Duplicate type definition detected at line ' + _$[$0-3].first_line + '.');
            if (BUILTIN_TYPES.has(n)) throw new Error('Cannot use built-in type "' + n + '" as a custom type name at line ' + _$[$0-3].first_line + '.');

            state.defType(n, Object.assign({type: 'text'}, $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 30: case 246:
this.$ = $$[$0];
break;
case 31: case 154: case 164: case 317: case 319:
 this.$ = Object.assign({}, $$[$0-1], $$[$0]); 
break;
case 32:
 this.$ = Object.assign({ type: 'float' }, $$[$0]); 
break;
case 33:
 this.$ = Object.assign({ type: 'decimal' }, $$[$0-1]); 
break;
case 35:
 this.$ = { type: 'bool' }; 
break;
case 37:
 this.$ = { type: 'datetime', range: 'datetime' }; 
break;
case 38:
 this.$ = { type: 'datetime', range: 'date' }; 
break;
case 39:
 this.$ = { type: 'datetime', range: 'time' }; 
break;
case 40:
 this.$ = { type: 'datetime', range: 'year' }; 
break;
case 41:
 this.$ = { type: 'datetime', range: 'timestamp' }; 
break;
case 42:
 this.$ = { type: 'json' }; 
break;
case 43:
 this.$ = { type: 'xml' }; 
break;
case 44:
 this.$ = { type: 'csv' }; 
break;
case 45:
 this.$ = { type: 'enum', values: $$[$0] }; 
break;
case 46: case 47:
 this.$ = { type: $$[$0] }; 
break;
case 50:
this.$ = { type: 'int' };
break;
case 51:
this.$ = { type: 'int', digits: parseInt($$[$0-1]) };
break;
case 52:
this.$ = { type: 'int', bytes: $$[$0-3], digits: parseInt($$[$0-1]) };
break;
case 53:
this.$ = { type: 'int', bytes: $$[$0-1] };
break;
case 55:
 this.$ = { unsigned: true }; 
break;
case 56: case 312:
 this.$ = {}; 
break;
case 57:
 this.$ = { totalDigits: parseInt($$[$0-1]) }; 
break;
case 58:
 this.$ = { decimalDigits: parseInt($$[$0-1]) }; 
break;
case 59:
 this.$ = { totalDigits: parseInt($$[$0-3]), decimalDigits: parseInt($$[$0-1]) }; 
break;
case 60:
 this.$ = { type: 'text' }; 
break;
case 61:
 this.$ = { type: 'text', maxLength: parseInt($$[$0-1]) }; 
break;
case 62:
 this.$ = { type: 'text', fixedLength: parseInt($$[$0-2]) }; 
break;
case 65:
 this.$ = { type: 'binary' }; 
break;
case 66:
 this.$ = { type: 'binary', maxLength: $$[$0-1] }; 
break;
case 67:
 this.$ = { type: 'binary', fixedLength: $$[$0-2] }; 
break;
case 72:
 this.$ = { validators0: $$[$0].validators }; 
break;
case 77:
this.$ = state.defEntity($$[$0-1][0], $$[$0-1][1]);
break;
case 78:
this.$ = state.defEntity($$[$0-4][0], Object.assign({}, $$[$0-4][1], $$[$0-1]));
break;
case 79: case 267: case 269: case 275: case 277:
this.$ = [ $$[$0] ];
break;
case 80:
this.$ = [ $$[$0-2], { base: $$[$0] } ];
break;
case 81:

            if (state.isEntityExist($$[$0])) throw new Error('Duplicate entity definition detected at line ' + _$[$0-1].first_line + '.');
            this.$ = $$[$0];
        
break;
case 82:
 this.$ = Object.assign({}, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 84:
 this.$ = { comment: $$[$0-1] }; 
break;
case 97:
 this.$ = { features: [ $$[$0-1] ] }; 
break;
case 98:
 this.$ = { features: $$[$0-1] }; 
break;
case 99: case 171: case 230: case 233: case 238: case 254: case 262:
this.$ = [ $$[$0-1] ];
break;
case 100: case 172: case 231: case 234: case 239: case 255: case 263:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 101:
 this.$ = { fields: { [$$[$0-1][0]]: $$[$0-1][1] } }; 
break;
case 102:
 this.$ = { fields: $$[$0-1] }; 
break;
case 103:
 $$[$0-1][1] = Object.assign({}, $$[$0-1][1], $$[$0]); 
break;
case 104:
 this.$ = [$$[$0-3], Object.assign({ type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])]; 
break;
case 105:
 this.$ = [$$[$0-2], Object.assign({}, $$[$0-1], $$[$0]) ]; 
break;
case 106:
this.$ = { 'default': $$[$0-1] };
break;
case 108:
this.$ = { auto: true };
break;
case 109:
this.$ = { auto: true } /** generator by base type **/;
break;
case 110:
this.$ = { auto: true, generator: $$[$0-1] }    ;
break;
case 111:
this.$ = { auto: true, generator: { name: $$[$0-2], options: $$[$0-1] } }    ;
break;
case 112:
this.$ = { 'computedBy': $$[$0] };
break;
case 117:
 this.$ = { modifiers0: $$[$0].modifiers }; 
break;
case 120:
 this.$ = { validators1: $$[$0].validators }; 
break;
case 123:
 this.$ = { modifiers1: $$[$0].modifiers }; 
break;
case 129:

            for (var k in $$[$0]) {
                if (k in $$[$0-1]) {
                    throw new Error('Duplicate field qualifier detected at line ' + _$[$0-1].first_line + '.');
                }
            }
            this.$ = Object.assign({}, $$[$0-1], $$[$0]);
        
break;
case 130:
 this.$ = { readOnly: true }; 
break;
case 131:
 this.$ = { fixedValue: true }; 
break;
case 132:
 this.$ = { forceUpdate: true }; 
break;
case 134:
 this.$ = { comment: $$[$0] }; 
break;
case 138:
 this.$ = { optional: true }; 
break;
case 139:
 this.$ = { modifiers: [ $$[$0] ] }; 
break;
case 140:

            this.$ = { modifiers: [ $$[$0-1] ].concat($$[$0].modifiers) };
        
break;
case 141: case 294: case 295: case 298:
 this.$ = { name: $$[$0] }; 
break;
case 142: case 199: case 318: case 326: case 330:
 this.$ = $$[$0]; 
break;
case 144:
 this.$ = { validators: $$[$0-1].validators.concat($$[$0].validators) }; 
break;
case 145:
 this.$ = { validators: [ { name: $$[$0] } ] }; 
break;
case 146:
 this.$ = { validators: [ $$[$0] ] }; 
break;
case 147:
 this.$ = { belongTo: $$[$0] }; 
break;
case 148:
 this.$ = { bindTo: $$[$0] }; 
break;
case 149:
 this.$ = { [$$[$0-1][0]]: $$[$0-1][1] }; 
break;
case 150:
 this.$ = Object.assign({}, { [$$[$0-2][0]]: $$[$0-2][1] }, $$[$0]); 
break;
case 151:
 this.$ = { key: $$[$0-1] }; 
break;
case 152: case 153:
 this.$ = { fields: $$[$0] }; 
break;
case 155:
 this.$ = { unique: true }; 
break;
case 156:
 this.$ = { indexes: [$$[$0-1]] }; 
break;
case 157:
 this.$ = { indexes: $$[$0-1] }; 
break;
case 158:
 this.$ = [$$[$0-1]]; 
break;
case 159:
 this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 160: case 161:
 this.$ = { data: $$[$0-1] }; 
break;
case 162:
 this.$ = { interface: $$[$0-1] }; 
break;
case 163:
 this.$ = Object.assign({}, $$[$0]); 
break;
case 165:
 this.$ = { [$$[$0-4]]: $$[$0-1] }; 
break;
case 166:
 this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]); 
break;
case 169:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 170:
this.$ = { accept: $$[$0-1] };
break;
case 173:
this.$ = Object.assign($$[$0-2], { type: $$[$0-2].name }, $$[$0-1], $$[$0]);
break;
case 177: case 181: case 182: case 226:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 183: case 184:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 185:
this.$ = Object.assign({}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 186: case 322: case 324: case 328: case 332: case 336: case 338: case 383: case 385:
 this.$ = [ $$[$0] ]; 
break;
case 187: case 337: case 384:
 this.$ = [ $$[$0-1] ].concat($$[$0]); 
break;
case 189:
 this.$ = { oolType: 'findOne', model: $$[$0-6], case: { items: $$[$0-1] } }; 
break;
case 190:
 this.$ = { oolType: 'findOne', model: $$[$0-9], case: { items: $$[$0-4], else: $$[$0-2] } }; 
break;
case 191:
 this.$ = { oolType: 'findOne', model: $$[$0-3], condition: $$[$0-1]}; 
break;
case 192:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 193:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 194:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 195:
 this.$ = { oolType: 'javascript', script: $$[$0-2] }; 
break;
case 196:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 197: case 202: case 213:
 this.$ = [ $$[$0-1] ]; 
break;
case 198: case 203: case 214:
 this.$ = [ $$[$0-2] ].concat($$[$0]); 
break;
case 200: case 313: case 321:
 this.$ = $$[$0-1]; 
break;
case 204:
 this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] } 
break;
case 206:
 this.$ = { return: $$[$0-1] }; 
break;
case 207:
 this.$ = { return: Object.assign($$[$0-5], { exceptions: $$[$0-1] }) }; 
break;
case 208:
 this.$ = { oolType: 'ReturnExpression', value: $$[$0] }; 
break;
case 209:
 this.$ = { oolType: 'ConditionalStatement', test: $$[$0-3], then: $$[$0-1] } 
break;
case 210:
 this.$ = [ { oolType: 'ConditionalStatement', test: $$[$0-4], then: $$[$0-2] } ].concat($$[$0]); 
break;
case 211: case 212:
 state.defRelation($$[$0-1]); 
break;
case 216:

            if ($$[$0-2].right === $$[$0].right) {
                throw new Error('Invalid relation declaration at line ' + _$[$0-2].first_line + '.');
            }
            let right2 = { relationship: $$[$0-2].relationship, size: $$[$0-2].size };
            let right1Name = $$[$0].right;
            delete $$[$0].right;

            this.$ = Object.assign({}, $$[$0-2], { right: { [right1Name]: $$[$0], [$$[$0-2].right]: right2 }, type: 'chain' });
            delete this.$.relationship;
            delete this.$.size;
        
break;
case 217:

            let right1Name2 = $$[$0-3].left;
            let right2Name2 = $$[$0];

            this.$ = Object.assign({}, $$[$0-3], { relationship: $$[$0-3].relationship.replace('n:', '1:') }, { left: $$[$0-3].right, right: [ right1Name2, right2Name2 ], type: 'multi' });
        
break;
case 218:
 this.$ = Object.assign({}, $$[$0-1], { right: $$[$0] }); 
break;
case 219: case 374: case 378:
 this.$ = Object.assign({ left: $$[$0-2] }, $$[$0]); 
break;
case 220:
 this.$ = Object.assign({ left: $$[$0-3], optional: true }, $$[$0]); 
break;
case 221:
 this.$ = { relationship: 'n:1', size: 'one' }; 
break;
case 222:
 this.$ = { relationship: 'n:n', size: 'small' }; 
break;
case 223:
 this.$ = { relationship: 'n:n', size: 'medium' }; 
break;
case 224:
 this.$ = { relationship: 'n:n', size: 'large' }; 
break;
case 225:

            if (state.parsed.schema) throw new Error('Only one schema definition allowed in a schema file. Extra schema definition detected at line ' + _$[$0-5].first_line + '.');
            state.defSchema($$[$0-4], $$[$0-1]);
        
break;
case 229:
this.$ = { entities: $$[$0-1] };
break;
case 232:
this.$ = { views: $$[$0-1] };
break;
case 235:
this.$ = state.defDocument($$[$0-4], $$[$0-1]);
break;
case 236:
this.$ = { entity: $$[$0-1] };
break;
case 237:
this.$ = { entity: $$[$0-2], joinWith: $$[$0] };
break;
case 240:
this.$ = { entity: $$[$0-2], on: { left: $$[$0], right: '$key' } };
break;
case 241:
this.$ = { document: $$[$0-6], on: { left: $$[$0], right: $$[$0-2] } };
break;
case 242:
this.$ = state.defView($$[$0-4], $$[$0-1]);
break;
case 243:
this.$ = Object.assign({}, $$[$0-7], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 247:
this.$ = Object.assign({}, $$[$0-1], { isList: true });
break;
case 248:
this.$ = { entity: $$[$0] };
break;
case 249:
this.$ = { document: $$[$0-1] };
break;
case 252:
 this.$ = { selectBy: [ $$[$0-1] ] }; 
break;
case 253:
 this.$ = { selectBy: $$[$0-1] }; 
break;
case 257: case 258:
this.$ = { groupBy: $$[$0-1] };
break;
case 260: case 261:
this.$ = { orderBy: $$[$0-1] };
break;
case 264:
this.$ = { field: $$[$0], ascend: true };
break;
case 265:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 266:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 268: case 270: case 276: case 278:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 272:
this.$ = { skip: $$[$0-1] };
break;
case 274:
this.$ = { limit: $$[$0-1] };
break;
case 296: case 299:
 this.$ = { name: $$[$0-2] }; 
break;
case 297:
 this.$ = { name: $$[$0-3], args: $$[$0-1] }; 
break;
case 300:
 this.$ = { name: $$[$0-3], options: $$[$0-1] }; 
break;
case 304:
 this.$ = { oolType: 'ConstReference', name: $$[$0] } 
break;
case 305:
 this.$ = Object.assign({ oolType: 'FunctionCall' }, $$[$0]); 
break;
case 314: case 315:
 this.$ = {[$$[$0-2]]: $$[$0]}; 
break;
case 320:
 this.$ = []; 
break;
case 323:
 this.$ = $$[$0-1].concat( $$[$0] ); 
break;
case 325: case 327: case 329: case 331: case 333: case 339: case 386:
 this.$ = [ $$[$0-1] ].concat( $$[$0] ); 
break;
case 334:
this.$ = [];
break;
case 335:
this.$ = $$[$0-1];
break;
case 350:
 this.$ = Object.assign({ oolType: 'PipedValue', value: $$[$0-1] }, $$[$0]); 
break;
case 351:
 this.$ = Object.assign({ oolType: 'PipedValue', value: $$[$0-1] }, $$[$0] ); 
break;
case 352: case 353:
 this.$ = Object.assign({ oolType: 'PipedValue', value: $$[$0-2] }, $$[$0-1], $$[$0]); 
break;
case 354: case 355:
 this.$ = Object.assign({ oolType: 'PipedValue', value: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 356:
 this.$ = Object.assign({ oolType: 'PipedValue', value: $$[$0-4] }, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 357:
 this.$ = { oolType: 'ThrowExpression' }; 
break;
case 358:
 this.$ = { oolType: 'ThrowExpression', message: $$[$0-1] }; 
break;
case 359:
 this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-1] }; 
break;
case 360:
 this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], message: $$[$0-1] }; 
break;
case 361:
 this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] }; 
break;
case 362:
 this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] }; 
break;
case 363:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] }; 
break;
case 364:
 this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] }; 
break;
case 365:
 this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }; 
break;
case 366:
 this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] }; 
break;
case 367:
 this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] }; 
break;
case 368:
 this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] }; 
break;
case 369:
 this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] }; 
break;
case 370:
 this.$ = { oolType: 'BinaryExpression', operator: '=', left: $$[$0-2], right: $$[$0] }; 
break;
case 371:
 this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] }; 
break;
case 372:
 this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] }; 
break;
case 373: case 377:
 this.$ = Object.assign({ left: $$[$0-1] }, $$[$0]); 
break;
case 375: case 379:
 this.$ = Object.assign({ oolType: 'BinaryExpression' }, $$[$0-1], { right: $$[$0] }); 
break;
case 376: case 380:
 this.$ = Object.assign({ oolType: 'BinaryExpression' }, $$[$0-3], { right: $$[$0-1] }); 
break;
case 381:
 this.$ = { operator: 'and' }; 
break;
case 382:
 this.$ = { operator: 'or' }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,22:$V2,28:$V3,76:18,78:23,80:$V4,193:$V5,210:$V6,219:$V7,226:$V8},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,25]},{5:[2,4],6:26,7:$V0,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,22:$V2,28:$V3,76:18,78:23,80:$V4,193:$V5,210:$V6,219:$V7,226:$V8},{5:[2,5],6:27,7:$V0,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,22:$V2,28:$V3,76:18,78:23,80:$V4,193:$V5,210:$V6,219:$V7,226:$V8},o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),o($V9,[2,15]),{7:[1,29],18:[1,28]},{7:[1,31],23:30,25:32,28:$Va,244:$Vb,247:$Vc,256:$Vd},{7:[1,38],25:39,28:$Va,29:37,244:$Vb,247:$Vc,256:$Vd},{7:[1,40]},{18:$Ve,25:42,28:$Va,54:41,244:$Vb,247:$Vc,256:$Vd},{18:$Ve,25:42,28:$Va,54:44,244:$Vb,247:$Vc,256:$Vd},{18:$Ve,25:42,28:$Va,54:45,244:$Vb,247:$Vc,256:$Vd},{7:[1,47],194:46,196:48,200:50,202:$Vf,207:$Vg,257:$Vh},{7:[2,79],79:[1,53]},{18:$Ve,25:42,28:$Va,54:54,244:$Vb,247:$Vc,256:$Vd},{1:[2,3]},{5:[2,6]},{5:[2,7]},{7:[1,55]},{19:[1,56]},{7:[1,57]},{19:[1,58]},{26:[1,59]},o($Vi,[2,286]),o($Vi,[2,287]),o($Vi,[2,288]),o($Vi,[2,289]),{7:[1,60]},{19:[1,61]},o([7,26,108,109,131],$Vj,{31:62,34:63,35:$Vk}),o($V9,[2,77],{19:[1,65]}),{7:[1,66]},o($Vl,[2,310]),o($Vl,[2,311]),{7:[1,67]},{7:[1,68]},{7:[1,69]},{19:[1,70]},{7:[2,215],197:[1,71],199:[1,72]},{25:74,28:$Va,55:$Vm,129:73,244:$Vb,247:$Vc,256:$Vd},{25:74,28:$Va,55:$Vm,129:76,244:$Vb,247:$Vc,256:$Vd},o($Vn,[2,290]),o($Vn,[2,291]),{18:$Ve,25:42,28:$Va,54:77,244:$Vb,247:$Vc,256:$Vd},o($Vo,[2,81]),o($V9,[2,16]),{18:$Vp,20:78},o($V9,[2,20]),{23:81,24:80,25:32,28:$Va,244:$Vb,247:$Vc,256:$Vd},{18:$Vq,27:82,60:$Vr,141:86,142:87,175:$Vs,253:$Vt,254:$Vu,255:$Vv,267:$Vw},o($V9,[2,25]),{25:39,28:$Va,29:93,30:92,244:$Vb,247:$Vc,256:$Vd},o($Vx,[2,73],{32:94,75:95,107:96,26:$Vy,108:$Vz,109:$VA}),o($VB,[2,29]),{18:$Ve,25:42,28:$Va,36:100,37:101,39:102,41:103,42:104,43:105,44:[1,106],49:[1,107],50:[1,108],51:[1,109],52:[1,110],53:111,54:112,55:[1,113],56:114,57:[1,121],58:[1,122],65:[1,115],66:[1,116],68:[1,117],69:[1,118],70:119,71:[1,123],72:[1,124],244:$Vb,247:$Vc,256:$Vd,267:$VC},o($VD,[2,83],{77:125,81:126,88:[1,127]}),{19:[1,128]},{19:[1,129]},{19:[1,130]},o($V9,[2,211]),{194:132,195:131,196:48,200:50,202:$Vf,207:$Vg,257:$Vh},{159:$VE,198:133,201:134,205:$VF,206:$VG,207:$VH},{200:139,207:$Vg,257:$Vh},{98:[1,140]},o($VI,[2,292]),o($VI,[2,293]),{203:[1,141]},{7:[2,80]},{21:[1,142]},{7:[1,143]},{21:[1,144]},{7:[1,145]},{7:[2,22]},o($VJ,[2,279]),o($VJ,[2,280]),o($VJ,[2,281]),o($VJ,[2,282]),o($VJ,[2,283]),o($VJ,[2,284]),o($VJ,[2,285]),{18:$Ve,25:42,28:$Va,54:149,60:$VK,177:[1,146],244:$Vb,247:$Vc,256:$Vd,264:147,265:148},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:153,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,268:[1,151],269:152},{21:[1,161]},{7:[1,162]},{7:[2,70],33:163,73:164,74:165,130:166,131:$VM},o($Vx,[2,74]),o($VB,[2,107]),{59:[1,168]},o($VB,[2,109],{59:[1,169]}),{25:74,28:$Va,55:$Vm,110:170,129:171,244:$Vb,247:$Vc,256:$Vd},o($VB,[2,30]),o($VB,[2,54],{38:172,64:[1,173]}),o($VB,[2,32],{40:[1,174]}),o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VB,[2,37],{45:[1,175],47:[1,176],48:[1,177]}),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VN,[2,50],{59:[1,178]}),o($VO,[2,56],{59:[1,179]}),o($VB,[2,60],{59:[1,180]}),o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65],{59:[1,181]}),{18:$Ve,25:42,28:$Va,54:184,244:$Vb,247:$Vc,256:$Vd,268:[1,182],273:183},o($VP,[2,48]),o($VP,[2,49]),o($VQ,[2,68]),o($VQ,[2,69]),{21:[1,185]},o($VR,[2,85],{82:186,89:187,95:[1,188]}),{18:[1,189]},{211:190,212:191,215:[1,192]},{79:[1,195],227:193,228:194},{220:196,221:[1,197]},{21:[1,198]},{7:[1,199]},{7:[2,216]},{25:74,28:$Va,55:$Vm,129:200,244:$Vb,247:$Vc,256:$Vd},o($VS,[2,221]),o($VS,[2,222]),o($VS,[2,223]),{208:[1,201]},{25:74,28:$Va,55:$Vm,129:202,244:$Vb,247:$Vc,256:$Vd},{159:$VE,198:203,201:134,205:$VF,206:$VG,207:$VH},{204:[1,204]},o($V9,[2,17]),{18:$Vp,20:205,21:[2,18]},o($V9,[2,21]),{21:[2,23],23:81,24:206,25:32,28:$Va,244:$Vb,247:$Vc,256:$Vd},o($VJ,[2,312]),{177:[1,207]},{63:$VT,177:[2,316],266:208},{35:[1,210]},{35:[1,211]},o($VJ,[2,320]),{268:[1,212]},{63:$VU,268:[2,322],270:213},o($VV,[2,303]),o($VV,[2,304],{59:$VW}),o($VV,[2,305]),o($VV,[2,308],{74:165,130:166,73:216,113:217,114:218,127:219,128:$VX,131:$VM}),o($VV,[2,309]),o($VJ,[2,306]),o($VJ,[2,307]),o($V9,[2,26]),{21:[2,75],25:39,28:$Va,29:93,30:221,244:$Vb,247:$Vc,256:$Vd},{7:[2,27]},{7:[2,71]},o($VY,[2,72]),o($VY,[2,143],{130:166,74:222,131:$VM}),{25:74,28:$Va,55:$Vm,110:224,129:223,244:$Vb,247:$Vc,256:$Vd},{18:$Vq,27:226,60:$Vr,109:[1,225],141:86,142:87,175:$Vs,253:$Vt,254:$Vu,255:$Vv,267:$Vw},{18:$Ve,25:42,28:$Va,54:227,244:$Vb,247:$Vc,256:$Vd},o($VB,[2,112]),{59:$VW},o($VB,[2,31]),o($VB,[2,55]),o($VB,[2,33]),{46:[1,228]},{46:[1,229]},{46:[1,230]},{60:[1,231],62:[1,232]},{60:[1,233],63:[1,234]},{60:[1,235]},{60:[1,236]},o($VZ,[2,334]),{268:[1,237]},{63:$V_,268:[2,336],274:238},o($V9,[2,78]),o($V$,[2,87],{83:240,90:241,98:[1,242]}),o($VR,[2,86]),{7:[1,244],25:74,28:$Va,55:$Vm,96:243,129:245,244:$Vb,247:$Vc,256:$Vd},{7:[1,246]},{21:[1,247]},{21:[2,227],213:248,214:249,217:[1,250]},{7:[1,251]},{21:[1,252]},{7:[1,253]},{200:254,207:$Vg,257:$Vh},{21:[1,255]},{18:$Ve,25:42,28:$Va,54:256,244:$Vb,247:$Vc,256:$Vd},o($V9,[2,212]),{21:[2,213],194:132,195:257,196:48,200:50,202:$Vf,207:$Vg,257:$Vh},o($V01,[2,218]),{65:[1,258]},{7:[2,217]},o($V01,[2,219]),{159:$VE,198:259,201:134,205:$VF,206:$VG,207:$VH},{21:[2,19]},{21:[2,24]},o($VJ,[2,313]),{177:[2,317]},{18:$Ve,25:42,28:$Va,54:149,60:$VK,244:$Vb,247:$Vc,256:$Vd,265:260},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:261,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:262,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},o($VJ,[2,321]),{268:[2,323]},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:263,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,27:159,60:$Vr,61:[1,264],141:86,142:87,175:$Vs,192:157,253:$Vt,254:$Vu,255:$Vv,258:265,261:266,262:$VL,263:158,267:$Vw},o($VV,[2,350],{114:218,127:219,113:267,128:$VX}),o($VV,[2,351],{130:166,116:268,74:269,131:$VM}),o($V11,[2,117]),o($V11,[2,139],{127:219,114:270,128:$VX}),{25:74,28:$Va,55:$Vm,110:272,129:271,244:$Vb,247:$Vc,256:$Vd},{21:[2,76]},o($VY,[2,144]),o($V21,[2,145],{59:$VW}),o($V21,[2,146]),{61:[1,273]},{61:[1,274]},{18:$Vq,27:276,60:$Vr,61:[1,275],141:86,142:87,175:$Vs,253:$Vt,254:$Vu,255:$Vv,267:$Vw},o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),{61:[1,277]},{61:[1,279],63:[1,278]},{61:[1,280],63:[1,281]},{60:[1,282]},{61:[1,283]},{61:[1,284]},o($VZ,[2,335]),{268:[2,337]},{18:$Ve,25:42,28:$Va,54:285,244:$Vb,247:$Vc,256:$Vd},o($V31,[2,89],{84:286,91:287,134:[1,288]}),o($V$,[2,88]),{7:[1,290],18:$Ve,25:42,28:$Va,54:292,99:289,101:291,244:$Vb,247:$Vc,256:$Vd},{7:[1,293]},{19:[1,294]},{7:[2,298],59:[1,295]},o($VD,[2,84]),o($V9,[2,225]),{21:[2,226]},{21:[2,228]},{7:[1,296]},{19:[1,297]},o($V9,[2,242]),o([21,239,241,244,249,250],$V41,{147:298,150:299,151:$V51}),{18:$Ve,25:42,28:$Va,54:302,236:301,244:$Vb,247:$Vc,256:$Vd},o($V9,[2,235]),{7:[1,303]},{21:[2,214]},{209:[1,304]},o($V01,[2,220]),{63:$VT,177:[2,318],266:305},o($V61,[2,314]),o($V61,[2,315]),{63:$VU,268:[2,324],270:306},o($V71,[2,296]),{61:[1,307]},{61:[2,326],63:$V81,271:308},o($VV,[2,352],{130:166,74:269,116:310,131:$VM}),o($VV,[2,353],{127:219,118:311,114:312,128:$VX}),o($VY,[2,120]),o($V11,[2,140]),o($V21,[2,141],{59:$VW}),o($V21,[2,142]),o($VB,[2,108]),o($VB,[2,106]),o($VB,[2,110]),{61:[1,313]},o($VN,[2,51]),{60:[1,314]},o($VN,[2,53]),o($VO,[2,57]),{60:[1,315]},{61:[1,316]},o($VB,[2,61],{67:[1,317]}),o($VB,[2,66],{67:[1,318]}),{63:$V_,268:[2,338],274:319},o($V91,[2,91],{85:320,92:321,138:[1,322]}),o($V31,[2,90]),{25:323,28:$Va,244:$Vb,247:$Vc,256:$Vd},{7:[1,324]},{19:[1,325]},{7:[2,133],88:[1,327],102:326},o($VB,$Vj,{34:63,31:328,105:329,35:$Vk,132:[1,330],133:[1,331]}),o($VR,[2,97]),{25:74,28:$Va,55:$Vm,96:333,97:332,129:245,244:$Vb,247:$Vc,256:$Vd},{18:$Vq,25:338,27:337,28:$Va,60:$Vr,61:[1,334],141:86,142:87,175:$Vs,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,259:335,260:336,267:$Vw},{19:[1,339]},{18:$Ve,25:42,28:$Va,54:341,216:340,244:$Vb,247:$Vc,256:$Vd},o($Va1,[2,250],{229:342,238:343,239:[1,344]}),o($Vb1,[2,168]),{7:[1,346],18:$Vc1,25:348,28:$Va,152:345,154:347,244:$Vb,247:$Vc,256:$Vd},{7:[2,246],237:[1,350]},o($Vd1,[2,248],{219:[1,351]}),{21:[2,236],95:$Ve1,222:352},o($VS,[2,224]),{177:[2,319]},{268:[2,325]},o($V71,[2,297]),{61:[2,327]},{18:$Vq,27:159,60:$Vr,141:86,142:87,175:$Vs,192:157,253:$Vt,254:$Vu,255:$Vv,261:354,262:$VL,263:158,267:$Vw},o($VV,[2,354],{127:219,114:312,118:355,128:$VX}),o($VV,[2,355]),o([7,26,61,63,79,88,177,187,268,282,283,285,286,287,288,289,290,294,295],[2,123]),o($VB,[2,111]),{61:[1,356]},{61:[1,357]},o($VO,[2,58]),o($VB,[2,62]),o($VB,[2,67]),{268:[2,339]},o($Vf1,[2,93],{86:358,93:359,140:[1,360]}),o($V91,[2,92]),{7:[1,362],25:363,28:$Va,53:364,135:361,244:$Vb,247:$Vc,256:$Vd,267:$VC},{7:[1,365]},o($V$,[2,101]),{18:$Ve,25:42,28:$Va,54:292,99:367,100:366,101:291,244:$Vb,247:$Vc,256:$Vd},{7:[2,103]},{18:[1,368]},o($Vg1,[2,113],{107:96,103:369,111:370,121:371,75:372,120:373,122:374,26:$Vy,108:$Vz,109:$VA,123:$Vh1,124:$Vi1,125:$Vj1,126:$Vk1}),o($Vl1,[2,126],{106:379,120:380,126:$Vk1}),{25:74,28:$Va,55:$Vm,129:381,244:$Vb,247:$Vc,256:$Vd},{25:74,28:$Va,55:$Vm,129:382,244:$Vb,247:$Vc,256:$Vd},{21:[1,383]},{7:[1,384]},{7:[2,299]},{61:[1,385]},{61:[2,330],63:$Vm1,272:386},o($Vn1,[2,301]),o($Vn1,[2,302]),{25:74,28:$Va,55:$Vm,129:389,218:388,244:$Vb,247:$Vc,256:$Vd},{21:[1,390]},{7:[1,391]},o($Vo1,[2,256],{230:392,241:[1,393]}),o($Va1,[2,251]),{160:[1,394]},{7:[1,395]},{19:[1,396]},o($Vp1,[2,174],{155:397,34:398,107:399,35:$Vk,108:$Vq1}),o($Vr1,[2,294]),o($Vr1,[2,295]),{7:[2,247]},o($Vd1,[2,249]),{21:[2,237]},{18:$Ve,25:42,28:$Va,54:402,223:401,244:$Vb,247:$Vc,256:$Vd},{61:[2,328],63:$V81,271:403},o($VV,[2,356]),o($VN,[2,52]),o($VO,[2,59]),{21:[2,95],87:404,94:405,143:[1,406]},o($Vf1,[2,94]),{141:407,142:408,175:$Vs,267:$Vw},{7:[1,409],79:$Vs1,136:410},{19:[1,412]},o($Vo,[2,152]),o($Vo,[2,153]),o($V31,[2,151]),{21:[1,413]},{7:[1,414]},{7:[2,134]},o($Vl1,$Vt1,{74:165,130:166,114:218,127:219,104:415,73:416,113:417,128:$VX,131:$VM}),o($Vg1,[2,114]),o($Vg1,[2,128],{107:96,121:371,75:372,120:373,122:374,111:418,26:$Vy,108:$Vz,109:$VA,123:$Vh1,124:$Vi1,125:$Vj1,126:$Vk1}),o($VB,[2,135]),o($VB,[2,136]),o($VB,[2,137]),o($VB,[2,138]),o($VB,[2,130]),o($VB,[2,131]),o($VB,[2,132]),o($Vl1,[2,105]),o($Vl1,[2,127]),o($Vu1,[2,147]),o($Vu1,[2,148]),o($VR,[2,98]),{21:[2,99],25:74,28:$Va,55:$Vm,96:333,97:419,129:245,244:$Vb,247:$Vc,256:$Vd},{7:[2,300]},{61:[2,331]},{18:$Vq,25:338,27:337,28:$Va,60:$Vr,141:86,142:87,175:$Vs,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,260:420,267:$Vw},{21:[1,421]},{7:[1,422]},o([21,217],[2,229]),{18:$Ve,21:[2,230],25:42,28:$Va,54:341,216:423,244:$Vb,247:$Vc,256:$Vd},o($Vv1,[2,259],{231:424,244:[1,425]}),{160:[1,426]},{7:[1,428],18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,165:427,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},o($Vb1,[2,169]),{18:$Vc1,25:348,28:$Va,152:437,153:436,154:347,244:$Vb,247:$Vc,256:$Vd},{7:$Vt1,73:416,74:165,104:438,113:417,114:218,127:219,128:$VX,130:166,131:$VM},o($Vp1,[2,175],{107:439,108:$Vq1}),o($Vp1,[2,176]),{59:[1,440]},{7:[1,441]},{219:[1,443],224:[1,442]},{61:[2,329]},{21:[2,82]},{21:[2,96]},{7:[1,444]},{7:[1,445]},{7:[1,446]},o($V91,[2,156]),o($Vo,[2,154]),{137:[1,447]},{25:363,28:$Va,53:364,135:449,139:448,244:$Vb,247:$Vc,256:$Vd,267:$VC},o($V$,[2,102]),{18:$Ve,21:[2,149],25:42,28:$Va,54:292,99:367,100:450,101:291,244:$Vb,247:$Vc,256:$Vd},o($Vl1,[2,104]),o($Vl1,[2,179],{114:218,127:219,113:451,128:$VX}),o($Vl1,[2,180],{130:166,74:269,116:452,131:$VM}),o($Vg1,[2,129]),{21:[2,100]},{61:[2,332],63:$Vm1,272:453},{21:[2,232]},{21:[2,233],25:74,28:$Va,55:$Vm,129:389,218:454,244:$Vb,247:$Vc,256:$Vd},{21:[2,231]},o($Vy1,[2,271],{232:455,249:[1,456]}),{160:[1,457]},{7:[1,459],25:74,28:$Va,55:$Vm,129:461,242:458,244:$Vb,245:460,247:$Vc,256:$Vd},{7:[1,462]},{19:[1,463]},o($Vz1,[2,340]),o($Vz1,[2,341],{291:464,292:465,294:$VA1,295:$VB1}),{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:468,276:469,278:434,280:433,283:$Vx1},o($VC1,[2,347],{26:[1,477],79:[1,472],282:[1,470],283:[1,471],285:[1,473],286:[1,474],287:[1,475],288:[1,476],289:[1,478],290:[1,479]}),o($VC1,[2,348]),o($VC1,[2,349]),{59:[1,480]},{21:[1,481]},{7:[1,482]},{7:[2,173]},o($Vp1,[2,177]),{18:$Vq,27:226,60:$Vr,141:86,142:87,175:$Vs,253:$Vt,254:$Vu,255:$Vv,267:$Vw},{21:[2,238],95:$Ve1,222:483},{25:74,28:$Va,55:$Vm,129:484,244:$Vb,247:$Vc,256:$Vd},{209:[1,485]},{19:[1,486]},o($Vf1,[2,160]),o($Vf1,[2,161]),o($Vo,[2,155]),{21:[1,487]},{7:[1,488],79:$Vs1,136:410},{21:[2,150]},o($Vl1,[2,181],{130:166,74:269,116:489,131:$VM}),o($Vl1,[2,182],{127:219,114:312,118:490,128:$VX}),{61:[2,333]},{21:[2,234]},{21:[2,273],233:491,250:[1,492]},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:493,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{7:[1,495],25:74,28:$Va,55:$Vm,129:461,242:494,244:$Vb,245:460,247:$Vc,256:$Vd},{7:[1,496]},{19:[1,497]},{7:[2,267],63:$VD1,248:498},o($VE1,[2,264],{246:[1,500],247:[1,501]}),o($Va1,[2,252]),{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,165:503,175:$Vs,181:432,192:157,240:502,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},o($VF1,[2,373]),{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:[1,505],60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,276:504,278:434,280:433,283:$Vx1},o($VG1,[2,381]),o($VG1,[2,382]),{61:[1,506]},{291:464,292:465,294:$VA1,295:$VB1},o($VC1,[2,361]),{282:[1,507]},{283:[1,509],284:[1,508]},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:510,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:511,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:512,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:513,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:514,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:515,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:516,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,276:517,278:434,280:433,283:$Vx1},o($Vb1,[2,170]),{18:$Vc1,21:[2,171],25:348,28:$Va,152:437,153:518,154:347,244:$Vb,247:$Vc,256:$Vd},{21:[2,239]},{7:[2,240]},{225:[1,519]},{25:522,28:$Va,144:520,145:521,244:$Vb,247:$Vc,256:$Vd},o($V91,[2,157]),{21:[2,158],25:363,28:$Va,53:364,135:449,139:523,244:$Vb,247:$Vc,256:$Vd,267:$VC},o($Vl1,[2,183],{127:219,114:312,118:524,128:$VX}),o($Vl1,[2,184]),{21:[2,243]},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:525,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw},{7:[1,526]},{7:[1,527]},{19:[1,528]},o($Vo1,[2,257]),{25:74,28:$Va,55:$Vm,129:461,243:529,244:$Vb,245:530,247:$Vc,256:$Vd},{7:[2,268]},{25:74,28:$Va,55:$Vm,129:461,244:$Vb,245:531,247:$Vc,256:$Vd},o($VE1,[2,265]),o($VE1,[2,266]),{21:[1,532]},{7:[1,533]},o($VF1,[2,375]),{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:534,276:469,278:434,280:433,283:$Vx1},{291:535,292:465,294:$VA1,295:$VB1},o($VC1,[2,362]),o($VC1,[2,363]),{284:[1,536]},o($VC1,[2,366]),o($VC1,[2,367]),o($VC1,[2,368]),o($VC1,[2,369]),o($VC1,[2,370]),o($VC1,[2,371]),o($VC1,[2,372]),{61:[1,537]},{21:[2,172]},{25:74,28:$Va,55:$Vm,129:538,244:$Vb,247:$Vc,256:$Vd},{21:[1,539]},{21:[2,163],25:522,28:$Va,144:540,145:521,244:$Vb,247:$Vc,256:$Vd},{7:[1,541]},{21:[2,159]},o($Vl1,[2,185]),{7:[1,542]},o($Vy1,[2,272]),o($Vv1,[2,260]),{25:74,28:$Va,55:$Vm,129:461,243:543,244:$Vb,245:530,247:$Vc,256:$Vd},{21:[1,544]},{7:[1,545]},{7:[2,269],63:$VD1,248:546},o($Va1,[2,253]),{18:$Vq,21:[2,254],25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,165:503,175:$Vs,181:432,192:157,240:547,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},{61:[1,548]},o($VF1,[2,374]),o($VC1,[2,364]),o($VC1,[2,365]),{224:[1,549]},{21:[2,162]},{21:[2,164]},{19:[1,550]},{21:[2,274]},{21:[1,551]},o($Vo1,[2,258]),{21:[2,262],25:74,28:$Va,55:$Vm,129:461,243:552,244:$Vb,245:530,247:$Vc,256:$Vd},{7:[2,270]},{21:[2,255]},o($VF1,[2,376]),{25:74,28:$Va,55:$Vm,129:553,244:$Vb,247:$Vc,256:$Vd},{146:554,147:555,150:299,151:$V51,158:$V41},o($Vv1,[2,261]),{21:[2,263]},{7:[2,241]},{21:[1,556]},{148:557,156:558,157:559,158:$VH1},o([21,28,244,247,256],[2,165]),{21:[2,205],149:561,188:562,191:$VI1},o($VJ1,[2,186],{156:558,157:559,148:564,158:$VH1}),o($VK1,[2,188]),{159:[1,565]},{21:[2,166]},{7:[1,566],189:[1,567]},{18:$Vq,27:159,60:$Vr,141:86,142:87,175:$Vs,192:568,253:$Vt,254:$Vu,255:$Vv,262:$VL,267:$Vw},o($VJ1,[2,187]),{25:569,28:$Va,244:$Vb,247:$Vc,256:$Vd},{21:[2,206]},{7:[1,570]},o([7,189],[2,208]),{160:[1,571]},{19:[1,572]},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,161:[1,573],165:574,175:$Vs,181:432,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,165:576,175:$Vs,181:432,190:575,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},{7:[1,577]},{7:[1,578]},{21:[1,579]},{187:[1,580]},{19:[1,581]},o($VK1,[2,191]),{21:[2,207]},{18:$Vq,27:159,60:$Vr,141:86,142:87,175:$Vs,192:582,253:$Vt,254:$Vu,255:$Vv,262:$VL,267:$Vw},{18:$Vq,25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,162:583,165:585,175:$Vs,181:432,182:584,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},{7:[1,586]},{21:[1,587],163:[1,588]},{7:[1,589]},{187:[1,590]},{18:$Vq,21:[2,209],25:74,27:159,28:$Va,55:$Vm,59:$Vw1,60:$Vr,110:156,129:155,141:86,142:87,165:576,175:$Vs,181:432,190:591,192:157,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,261:154,262:$VL,263:158,267:$Vw,275:429,276:430,278:434,280:433,283:$Vx1},o($VK1,[2,189]),{18:$Vq,27:159,60:$Vr,141:86,142:87,164:592,175:$Vs,188:594,191:$VI1,192:593,253:$Vt,254:$Vu,255:$Vv,262:$VL,267:$Vw,279:595,281:$VL1},o($VM1,[2,197],{25:74,141:86,142:87,261:154,129:155,110:156,192:157,263:158,27:159,275:429,276:430,181:432,280:433,278:434,182:584,165:585,162:597,18:$Vq,28:$Va,55:$Vm,59:$Vw1,60:$Vr,175:$Vs,244:$Vb,247:$Vc,253:$Vt,254:$Vu,255:$Vv,256:$Vd,262:$VL,267:$Vw,283:$Vx1}),{18:$Vq,27:159,60:$Vr,141:86,142:87,164:598,175:$Vs,188:594,191:$VI1,192:593,253:$Vt,254:$Vu,255:$Vv,262:$VL,267:$Vw,279:595,281:$VL1},{21:[2,210]},{7:[1,599]},{7:[2,344]},{7:[2,345]},{7:[2,346]},{2:[1,600]},o($VM1,[2,198]),{7:[2,204]},{21:[1,601]},{7:[2,357],59:[1,602]},o($VK1,[2,190]),{18:[1,603],25:604,28:$Va,244:$Vb,247:$Vc,256:$Vd},{61:[1,605]},{61:[1,606],63:[1,607]},{7:[2,358]},{7:[2,359]},{18:[1,608]},{61:[1,609]},{7:[2,360]}],
defaultActions: {2:[2,1],3:[2,2],25:[2,3],26:[2,6],27:[2,7],77:[2,80],82:[2,22],133:[2,216],163:[2,27],164:[2,71],202:[2,217],205:[2,19],206:[2,24],208:[2,317],213:[2,323],221:[2,76],238:[2,337],248:[2,226],249:[2,228],257:[2,214],305:[2,319],306:[2,325],308:[2,327],319:[2,339],326:[2,103],334:[2,299],350:[2,247],352:[2,237],368:[2,134],385:[2,300],386:[2,331],403:[2,329],404:[2,82],405:[2,96],419:[2,100],421:[2,232],423:[2,231],438:[2,173],450:[2,150],453:[2,333],454:[2,234],483:[2,239],484:[2,240],491:[2,243],498:[2,268],518:[2,172],523:[2,159],539:[2,162],540:[2,164],542:[2,274],546:[2,270],547:[2,255],552:[2,263],553:[2,241],561:[2,166],566:[2,206],579:[2,207],591:[2,210],593:[2,344],594:[2,345],595:[2,346],598:[2,204],605:[2,358],606:[2,359],609:[2,360]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function ParserState () {
        this.indents = [0];
        this.indent = 0;
        this.dedents = 0;
        this.eof = false;
        this.comment = false;
        this.brackets = [];
        this.parsed = {};
        this.stateStack = [];
    }

    ParserState.prototype = {
        get hasBrackets() {
            return this.brackets.length > 0;
        },

        get lastIndent() {
            return this.indents[this.indents.length - 1]
        },

        get hasIndent() {
            return this.indents.length > 0;
        },

        doIndent() {
            this.indents.push(this.indent);
        },

        doDedent() {
            this.dedents = 0;

            while (this.indents.length) {
                this.dedents++;
                this.indents.pop();
                if (this.lastIndent == this.indent) break;
            }
        },

        dedentAll() {
            this.indent = 0;
            this.dedents = this.indents.length - 1;
            this.indents = [0];
        },

        enterObject() {
            this.stateStack.push('object');
        },

        exitObject() {
            let current = this.stateStack.pop();
            if (current !== 'object') {
                throw new Error('Unmatched object bracket!');
            }
        },

        enterArray() {
            this.stateStack.push('array');
        },

        exitArray() {
            let current = this.stateStack.pop();
            if (current !== 'array') {
                throw new Error('Unmatched array bracket!');
            }
        },

        isTypeExist(type) {
            return this.parsed.type && (type in this.parsed.type);
        },

        use(namespace) {
            if (!this.parsed.namespace) {
                this.parsed.namespace = [];
            }

            this.parsed.namespace.push(namespace);
        },

        defConst(name, value, line) {
            if (!this.parsed.const) {
                this.parsed.const = {};
            }

            if (name in this.parsed.const) {
                throw new Error('Duplicate constant definition detected at line ' + line + '.');
            }

            this.parsed.const[name] = value;
        },

        defType(type, def) {
            if (!this.parsed.type) {
                this.parsed.type = {};
            }

            this.parsed.type[type] = def;
        },

        isEntityExist(entity) {
            return this.parsed.entity && (entity in this.parsed.entity);
        },

        defEntity(entity, def) {
            if (!this.parsed.entity) {
                this.parsed.entity = {};
            }
            this.parsed.entity[entity] = Object.assign({}, this.parsed.entity[entity], def);
        },

        defRelation(relation) {
            if (!this.parsed.relation) {
                this.parsed.relation = [];
            }

            if (Object.prototype.toString.call(relation) === '[object Array]') {
                this.parsed.relation = this.parsed.relation.concat(relation);
            } else {
                this.parsed.relation.push(relation);
            }
        },

        defSchema(schema, def) {
            this.parsed.schema = Object.assign({}, { name: schema }, def);
        },

        defView(viewName, def) {
            if (!this.parsed.view) {
                this.parsed.view = {};
            }
            this.parsed.view[viewName] = Object.assign({}, this.parsed.view[viewName], def);
        },

        defDocument(docName, def) {
            if (!this.parsed.document) {
                this.parsed.document = {};
            }
            this.parsed.document[docName] = Object.assign({}, this.parsed.document[docName], def);
        },

        validate() {
            var errors = [];

            //add validations here

            if (errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        },

        build() {
            return this.parsed;
        }
    };

    var UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    function parseSize(size) {
        if (UNITS.has(size.substr(-1))) {
            let unit = size.substr(-1);
            let factor = UNITS[unit];

            size = size.substr(0, size.length - 1);

            return parseInt(size) * factor;
        } else {
            return parseInt(size);
        }
    }

    function unquoteString(str, quotes) {
        return str.substr(quotes, str.length-quotes*2);
    }

    function normalizeIdentifier(id) {
        return id[0] === '`' ? id.substr(1, id.length-2) : id;
    }

    function normalizeDotName(name) {
        return name.split('.').map(n => normalizeIdentifier(n.trim())).join('.');
    }

    function normalizeReference(ref) {
        return { oolType: 'ObjectReference', name: ref.substr(1) };
    }

    var KEYWORDS = new Set([
        "not", "and", "or", "xor", "mod", "div", "in", "is", "like", //operators
        'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary', 'datetime', 'date', 'time', 'year', 'timestamp', 'json', 'xml', 'enum', 'csv',
        'exact', 'unsigned', "only", "fixedLength",
        "import", "const", "type", "entity", "schema", "database", "relation", "default", "auto", "entities", "data",
        "with", "has", "have", "key", "index", "as", "unique", "for",
        "every", "may", "a", "several", "many", "great", "of", "one", "to", "an",
        "optional", "readOnly", "fixedValue", "forceUpdate",
        "interface", "accept", "do", "select", "where", "return", "exists", "null", "otherwise", "unless", "find", "by", "case",
        "skip", "limit", "update", "create", "delete", "set", "throw", "error",
        "view", "order", "list", "asc", "desc", "views", "group", "skip",
        "document", "contains", "being", "which"
    ]);

    var BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    var DB_TYPES = new Set([
        "mysql", "mongodb"
    ]);

    var BUILTIN_TYPES = new Set([ 'int', 'float', 'decimal', 'text', 'bool', 'binary', 'datetime', 'json', 'xml', 'enum', 'csv' ]);
    var OOL_TYPE_KEYWORDS = new Set([ 'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary',
        'datetime', 'date', 'time', 'timestamp', 'json', 'xml', 'enum', 'csv' ]);

    var BUILTIN_TYPE_ATTR = [
        'type',
        'digits',
        'range',
        'values',
        'unsigned',
        'totalDigits',
        'maxLength',
        'fixedLength'
    ];

    if (typeof exports !== 'undefined') {
        exports.BUILTIN_TYPES = BUILTIN_TYPES;
        exports.OOL_TYPE_KEYWORDS = OOL_TYPE_KEYWORDS;
        exports.BUILTIN_TYPE_ATTR = BUILTIN_TYPE_ATTR;
        exports.KEYWORDS = KEYWORDS;
    }

    var state;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  return 5;  
break;
case 1:  //start the program
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');

                            state = new ParserState();
                        
break;
case 2:
                            if (this.topState(0) === 'INLINE' && !state.comment && !state.eof) {
                                this.unput(' ');

                                state.eof = true;
                                this.begin('EMPTY');
                                return 7;

                            } else if (state.indents.length > 1) {
                            //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                this.begin('DEDENTS');

                            } else {
                                this.begin('INITIAL');
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                return 19;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                if (!state.hasIndent) {
                                    throw new Error("Inconsistent indentation.");
                                }
                                this.begin('DEDENTS');

                            } else {
                                //same indent
                                this.begin('INLINE');
                            }
                        
break;
case 8:
                            if (state.dedents-- > 0) {
                                this.unput(yy_.yytext);
                                return 21;

                            } else if (state.eof) {
                                this.popState();

                            } else {
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                            }
                        
break;
case 9:
                            yy_.yytext = unquoteString(yy_.yytext, 3);
                            return 18;
                        
break;
case 10:
                            yy_.yytext = unquoteString(yy_.yytext, 1);
                            return 18;
                        
break;
case 11:
                            // implicit line joining
                            if (!state.hasBrackets) {
                                state.indent = 0;
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                return 7;
                            }
                        
break;
case 12:/* skip whitespace, separate tokens */
break;
case 13:
                            if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                state.brackets.push(yy_.yytext);
                            } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                var paired = BRACKET_PAIRS[yy_.yytext];
                                var lastBracket = state.brackets.pop();
                                if (paired !== lastBracket) {
                                    throw new Error("Inconsistent bracket.")
                                }
                            }
                            return yy_.yytext;
                        
break;
case 14:return 255;
break;
case 15:
                            yy_.yytext = parseFloat(yy_.yytext);
                            return 253;
                        
break;
case 16:
                            yy_.yytext = parseSize(yy_.yytext);
                            return 60;
                        
break;
case 17:
                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            return 62;
                        
break;
case 18:
                            yy_.yytext = parseInt(yy_.yytext);
                            return 60;
                        
break;
case 19:
                                yy_.yytext = normalizeDotName(yy_.yytext);
                                return 55;
                           
break;
case 20:
                                yy_.yytext = normalizeReference(yy_.yytext);
                                return 262;
                           
break;
case 21:
                                return 297;
                           
break;
case 22:
                                yy_.yytext = (yy_.yytext === 'true');
                                return 254;
                           
break;
case 23:return yy_.yytext;
break;
case 24:
                            if (KEYWORDS.has(yy_.yytext)) {
                                if (state.brackets.indexOf('{') !== -1) {
                                    return 256;
                                }

                                return yy_.yytext;
                            }

                            yy_.yytext = normalizeIdentifier(yy_.yytext);
                            return 256;
                        
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:#.*)/,/^(?:.)/,/^(?:.|$)/,/^(?:(("""(([^\\])|(\\.))*""")|('''(([^\\])|(\\.))*''')))/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y\b)*))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))))/,/^(?:(((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))\.\*))/,/^(?:((true)|(false)))/,/^(?:((~|,|:|\||--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))/],
conditions: {"INITIAL":{"rules":[0,1],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7],"inclusive":true},"DEDENTS":{"rules":[8],"inclusive":true},"INLINE":{"rules":[2,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}